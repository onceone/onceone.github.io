<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡侃有料的博客</title>
  
  
  <link href="http://hutalk.top/atom.xml" rel="self"/>
  
  <link href="http://hutalk.top/"/>
  <updated>2024-11-21T09:32:33.353Z</updated>
  <id>http://hutalk.top/</id>
  
  <author>
    <name>胡侃有料</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>滤波</title>
    <link href="http://hutalk.top/2024/11/21/%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/21/%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-21T09:32:09.000Z</published>
    <updated>2024-11-21T09:32:33.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-直通滤波"><a href="#1-直通滤波" class="headerlink" title="1. 直通滤波"></a>1. 直通滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/filters/passthrough.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span>&#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_filtered</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成数据</span></span><br><span class="line">    cloud-&gt;width = <span class="number">5</span>;</span><br><span class="line">    cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">    cloud-&gt;points.<span class="built_in">resize</span>(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        cloud-&gt;points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud-&gt;points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud-&gt;points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印滤波前数据</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;PointCloud before filtering has: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[i].x &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; cloud-&gt;points[i].y &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; cloud-&gt;points[i].z &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 创建滤波器对象，对z轴设置范围0.0～1.0之间，不在该范围内的点过滤</span></span><br><span class="line">    pcl::PassThrough&lt;pcl::PointXYZ&gt; pass;</span><br><span class="line">    pass.<span class="built_in">setInputCloud</span>(cloud);</span><br><span class="line">    pass.<span class="built_in">setFilterFieldName</span>(<span class="string">&quot;z&quot;</span>);</span><br><span class="line">    pass.<span class="built_in">setFilterLimits</span>(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    pass.<span class="built_in">filter</span>(*cloud_filtered);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印滤波后数据</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;PointCloud after filtering has: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_filtered-&gt;points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_filtered-&gt;points[i].x &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; cloud_filtered-&gt;points[i].y &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; cloud_filtered-&gt;points[i].z &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以对坐标轴进行过滤，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill in the cloud data</span></span><br><span class="line">pcl::PCDReader reader;</span><br><span class="line">reader.<span class="built_in">read</span>(<span class="string">&quot;16line.pcd&quot;</span>, *cloud);</span><br><span class="line"></span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Cloud before filtering: &quot;</span> &lt;&lt; cloud-&gt;points.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_filtered2</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_filtered3</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the filtering object</span></span><br><span class="line">pcl::PassThrough&lt;pcl::PointXYZ&gt; pass;</span><br><span class="line">pass.<span class="built_in">setInputCloud</span>(cloud);</span><br><span class="line">pass.<span class="built_in">setFilterFieldName</span>(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">pass.<span class="built_in">setFilterLimits</span>(<span class="number">-5.0</span>, <span class="number">5.0</span>);</span><br><span class="line"><span class="comment">// pass.setFilterLimitsNegative(true);</span></span><br><span class="line">pass.<span class="built_in">filter</span>(*cloud_filtered2);</span><br><span class="line"><span class="comment">// filter range Y-axis</span></span><br><span class="line">pass.<span class="built_in">setInputCloud</span>(cloud_filtered2);</span><br><span class="line">pass.<span class="built_in">setFilterFieldName</span>(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">pass.<span class="built_in">setFilterLimits</span>(<span class="number">-5.0</span>, <span class="number">5.0</span>);</span><br><span class="line">pass.<span class="built_in">filter</span>(*cloud_filtered3);</span><br><span class="line">   <span class="comment">// filter range Z-axis</span></span><br><span class="line">pass.<span class="built_in">setInputCloud</span>(cloud_filtered3);</span><br><span class="line">pass.<span class="built_in">setFilterFieldName</span>(<span class="string">&quot;z&quot;</span>);</span><br><span class="line">pass.<span class="built_in">setFilterLimits</span>(<span class="number">-0.5</span>, <span class="number">3.0</span>);</span><br><span class="line">pass.<span class="built_in">filter</span>(*cloud_filtered);</span><br></pre></td></tr></table></figure><h1 id="2-VoxelGrid体素网格法下采样"><a href="#2-VoxelGrid体素网格法下采样" class="headerlink" title="2. VoxelGrid体素网格法下采样"></a>2. VoxelGrid体素网格法下采样</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/filters/voxel_grid.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_filtered</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点云对象读取</span></span><br><span class="line">    pcl::PCDReader reader;</span><br><span class="line">    reader.<span class="built_in">read</span>(<span class="string">&quot;../table_scene_lms400.pcd&quot;</span>, *cloud);</span><br><span class="line"></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;PointCloud before filtering has: &quot;</span> &lt;&lt; cloud-&gt;width * cloud-&gt;height</span><br><span class="line">              &lt;&lt; <span class="string">&quot; data points.(&quot;</span> &lt;&lt;pcl::<span class="built_in">getFieldsList</span>(*cloud) &lt;&lt; <span class="string">&quot;).&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建体素网格滤波器对象</span></span><br><span class="line">    pcl::VoxelGrid&lt;pcl::PointXYZ&gt; vg;</span><br><span class="line">    vg.<span class="built_in">setInputCloud</span>(cloud); <span class="comment">// 设置输入点云</span></span><br><span class="line">    vg.<span class="built_in">setLeafSize</span>(<span class="number">0.01f</span>, <span class="number">0.01f</span>, <span class="number">0.01f</span>); <span class="comment">// 设置体素网格大小</span></span><br><span class="line">    vg.<span class="built_in">filter</span>(*cloud_filtered); <span class="comment">// 执行滤波操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出滤波后的点云信息</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;PointCloud after filtering has: &quot;</span> &lt;&lt; cloud_filtered-&gt;width * cloud_filtered-&gt;height</span><br><span class="line">              &lt;&lt; <span class="string">&quot; data points.(&quot;</span> &lt;&lt; pcl::<span class="built_in">getFieldsList</span>(*cloud_filtered) &lt;&lt; <span class="string">&quot;).&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-直通滤波&quot;&gt;&lt;a href=&quot;#1-直通滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 直通滤波&quot;&gt;&lt;/a&gt;1. 直通滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/categories/C/PCL/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>输入输出</title>
    <link href="http://hutalk.top/2024/11/21/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://hutalk.top/2024/11/21/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</id>
    <published>2024-11-21T09:30:19.000Z</published>
    <updated>2024-11-21T09:30:53.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1. 读取文件"></a>1. 读取文件</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span>&#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开点文件</span></span><br><span class="line">    <span class="keyword">if</span> (pcl::io::<span class="built_in">loadPCDFile</span>&lt;pcl::PointXYZ&gt;(<span class="string">&quot;../test.pcd&quot;</span>, *cloud) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">PCL_ERROR</span>(<span class="string">&quot;Couldn&#x27;t read file point_cloud.pcd \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认就是二进制块读取，转换为模块化PointCloud</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Loaded &quot;</span></span><br><span class="line">             &lt;&lt; cloud-&gt;width * cloud-&gt;height</span><br><span class="line">             &lt;&lt; <span class="string">&quot; data points from point_cloud.pcd with the following fields: &quot;</span></span><br><span class="line">             &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[i].x</span><br><span class="line">                  &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[i].y</span><br><span class="line">                  &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[i].z &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-保存数据"><a href="#2-保存数据" class="headerlink" title="2. 保存数据"></a>2. 保存数据</h1><p>保存数据总共两种方式，</p><p>一种是保存成ascii格式，一种是保存成二进制格式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 从硬盘中读取点云文件</span></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_in</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">    pcl::PCDReader reader; <span class="comment">// 定义点云读取对象</span></span><br><span class="line">    <span class="keyword">if</span> (reader.<span class="built_in">read</span>(<span class="string">&quot;../test.pcd&quot;</span>, *cloud_in) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">PCL_ERROR</span>(<span class="string">&quot;Couldn&#x27;t read file test.pcd \n&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt; <span class="string">&quot;-&gt;loaded &quot;</span> &lt;&lt; cloud_in-&gt;points.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; data points from test.pcd&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 点云投影到XOY平面</span></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_projected</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定一个输出参数</span></span><br><span class="line">    cloud_projected-&gt;width = cloud_in-&gt;width;</span><br><span class="line">    cloud_projected-&gt;height = <span class="number">1</span>; </span><br><span class="line">    cloud_projected-&gt;is_dense = <span class="literal">true</span>;</span><br><span class="line">    cloud_projected-&gt;points.<span class="built_in">resize</span>(cloud_in-&gt;points.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_in-&gt;points.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cloud_projected-&gt;points[i].x = cloud_in-&gt;points[i].x;</span><br><span class="line">        cloud_projected-&gt;points[i].y = cloud_in-&gt;points[i].y;</span><br><span class="line">        cloud_projected-&gt;points[i].z = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 将投影后的点云保存到文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法1：保存为ASCII格式</span></span><br><span class="line">    <span class="keyword">if</span> (!cloud_projected-&gt;<span class="built_in">empty</span>())&#123;</span><br><span class="line">        pcl::io::<span class="built_in">savePCDFileASCII</span>(<span class="string">&quot;projected.pcd&quot;</span>, *cloud_projected);</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot;-&gt;Saved &quot;</span> &lt;&lt; cloud_projected-&gt;points.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; data points to projected.pcd&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">PCL_ERROR</span>(<span class="string">&quot;Couldn&#x27;t save projected.pcd \n&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法2：保存为二进制格式</span></span><br><span class="line">    <span class="keyword">if</span> (!cloud_projected-&gt;<span class="built_in">empty</span>())&#123;</span><br><span class="line">        pcl::io::<span class="built_in">savePCDFileBinary</span>(<span class="string">&quot;projected.pcd&quot;</span>, *cloud_projected);</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot;-&gt;Saved &quot;</span> &lt;&lt; cloud_projected-&gt;points.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; data points to projected.pcd&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">PCL_ERROR</span>(<span class="string">&quot;Couldn&#x27;t save projected.pcd \n&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-点云连接"><a href="#3-点云连接" class="headerlink" title="3. 点云连接"></a>3. 点云连接</h1><p>编译运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./io -f</span><br><span class="line">./io -p</span><br></pre></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.5 FATAL_ERROR)</span><br><span class="line"></span><br><span class="line">project(io)</span><br><span class="line"></span><br><span class="line">find_package(PCL 1.11 REQUIRED)</span><br><span class="line"></span><br><span class="line">include_directories(<span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">link_directories(<span class="variable">$&#123;PCL_LIBRARY_DIRS&#125;</span>)</span><br><span class="line">add_definitions(<span class="variable">$&#123;PCL_DEFINITIONS&#125;</span>)</span><br><span class="line"></span><br><span class="line">add_executable (io m3.cpp)</span><br><span class="line">target_link_libraries (io <span class="variable">$&#123;PCL_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;argc: &quot;</span> &lt;&lt; argc &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;argv: &quot;</span> &lt;&lt; argv[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;please specify command line arg &#x27;-f&#x27; or &#x27;-p&#x27; &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt; cloud_a,cloud_b,cloud_c; </span><br><span class="line">    pcl::PointCloud&lt;pcl::Normal&gt; n_cloud_b;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointNormal&gt; p_n_cloud_c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建点云</span></span><br><span class="line">    cloud_a.width = <span class="number">5</span>;</span><br><span class="line">    cloud_a.height = cloud_b.height = n_cloud_b.height = <span class="number">1</span>;</span><br><span class="line">    cloud_a.points.<span class="built_in">resize</span>(cloud_a.width * cloud_a.height); <span class="comment">// 总数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否连接为a+b=c</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">&quot;-p&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        cloud_b.width = <span class="number">3</span>;</span><br><span class="line">        cloud_b.points.<span class="built_in">resize</span>(cloud_b.width * cloud_b.height);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        n_cloud_b.width = <span class="number">5</span>; <span class="comment">// 如果是连接XYZ与normal则生成5个法线</span></span><br><span class="line">        n_cloud_b.points.<span class="built_in">resize</span>(n_cloud_b.width * n_cloud_b.height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 填充点云</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_a.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        cloud_a.points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud_a.points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud_a.points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">&quot;-p&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_b.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            cloud_b.points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            cloud_b.points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            cloud_b.points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n_cloud_b.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            n_cloud_b.points[i].normal[<span class="number">0</span>] = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            n_cloud_b.points[i].normal[<span class="number">1</span>] = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            n_cloud_b.points[i].normal[<span class="number">2</span>] = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 输出 A</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Cloud A: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_a.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud_a.points[i].x </span><br><span class="line">                  &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_a.points[i].y </span><br><span class="line">                  &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_a.points[i].z &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出 B</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Cloud B: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">&quot;-p&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_b.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud_b.points[i].x </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_b.points[i].y </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_b.points[i].z &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n_cloud_b.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; n_cloud_b.points[i].normal[<span class="number">0</span>] </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n_cloud_b.points[i].normal[<span class="number">1</span>] </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n_cloud_b.points[i].normal[<span class="number">2</span>] &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 连接</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">&quot;-p&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        cloud_c = cloud_a;</span><br><span class="line">        cloud_c += cloud_b; <span class="comment">// a+b = c</span></span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Cloud C: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_c.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud_c.points[i].x </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_c.points[i].y </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_c.points[i].z &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pcl::<span class="built_in">concatenateFields</span>(cloud_a, n_cloud_b, p_n_cloud_c); <span class="comment">// 连接字段</span></span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Cloud C: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; p_n_cloud_c.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; p_n_cloud_c.points[i].normal[<span class="number">0</span>] </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p_n_cloud_c.points[i].normal[<span class="number">1</span>] </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p_n_cloud_c.points[i].normal[<span class="number">2</span>] &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-读取文件&quot;&gt;&lt;a href=&quot;#1-读取文件&quot; class=&quot;headerlink&quot; title=&quot;1. 读取文件&quot;&gt;&lt;/a&gt;1. 读取文件&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/categories/C/PCL/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>深度图</title>
    <link href="http://hutalk.top/2024/11/21/%E6%B7%B1%E5%BA%A6%E5%9B%BE/"/>
    <id>http://hutalk.top/2024/11/21/%E6%B7%B1%E5%BA%A6%E5%9B%BE/</id>
    <published>2024-11-21T09:29:12.000Z</published>
    <updated>2024-11-21T09:29:36.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-从点云创建深度图"><a href="#1-从点云创建深度图" class="headerlink" title="1. 从点云创建深度图"></a>1. 从点云创建深度图</h2><pre><code class="cpp">#include &lt;pcl/range_image/range_image.h&gt;#include &lt;pcl/io/pcd_io.h&gt;#include &lt;pcl/visualization/pcl_visualizer.h&gt;#include &lt;pcl/visualization/range_image_visualizer.h&gt;int main(int argc, char** argv)&#123;    pcl::PointCloud&lt;pcl::PointXYZ&gt;::Ptr PointCloudPtr(new pcl::PointCloud&lt;pcl::PointXYZ&gt;);    pcl::PointCloud&lt;pcl::PointXYZ&gt; &amp;PointCloud = *PointCloudPtr;    pcl::io::loadPCDFile(&quot;../bunny.pcd&quot;, PointCloud); // 加载数据    float angular_resolution = (float)(1.0f * (M_PI / 180.0f) ); // 深度传感器的角度分辨率，即深度图像中一个像素对应的角度    float maxAngleWidth = (float)(360.0f * (M_PI / 180.0f)); // 水平最大采样角度宽度    float maxAngleHeight = (float)(180.0f * (M_PI / 180.0f)); // 垂直最大采样角度宽度    Eigen::Affine3f sensorPose = (Eigen::Affine3f) Eigen::Translation3f(0.0f, 0.0f, 0.0f); // 深度传感器的采集位置    // 深度传感器遵循的坐标系统    pcl::RangeImage::CoordinateFrame coordinate_frame = pcl::RangeImage::CAMERA_FRAME; // 深度传感器遵循的坐标系统    float noiseLevel = 0.00; // 获取深度图像时，近邻点对查询距离值的影响水平    float minRange = 0.0f; // 深度图像中，距离小于该值的点将被忽略    int borderSize = 1; // 深度图像边界大小    // boost::shared_ptr&lt;pcl::RangeImage&gt; range_image_ptr(new pcl::RangeImage); // 可视化    const std::shared_ptr&lt;pcl::RangeImage&gt; range_image_ptr(new pcl::RangeImage);    pcl::RangeImage &amp;rangeImage = *range_image_ptr;    rangeImage.createFromPointCloud(PointCloud, angular_resolution, maxAngleWidth, maxAngleHeight, sensorPose, coordinate_frame, noiseLevel, minRange, borderSize);    // -------------------------------------------------------------------------    // 输出    std::cout &lt;&lt; rangeImage &lt;&lt; std::endl;    pcl::visualization::PCLVisualizer viewer(&quot;3D Viewer&quot;);    viewer.setBackgroundColor(1, 1, 1);    // 添加深度点云    pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointWithRange&gt; range_image_color_handler(range_image_ptr, 0, 0, 0);    viewer.addPointCloud(range_image_ptr, range_image_color_handler, &quot;range image&quot;);    viewer.setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 4, &quot;range image&quot;);    // 添加原始点云    pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointXYZ&gt; org_image_color_handler(PointCloudPtr, 255, 100, 0);    viewer.addPointCloud(PointCloudPtr,org_image_color_handler, &quot;org image&quot;);    viewer.setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 2, &quot;org image&quot;);    viewer.initCameraParameters();    viewer.addCoordinateSystem(1.0);    while (!viewer.wasStopped()) &#123;         viewer.spin();          pcl_sleep(0.01);    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-从点云创建深度图&quot;&gt;&lt;a href=&quot;#1-从点云创建深度图&quot; class=&quot;headerlink&quot; title=&quot;1. 从点云创建深度图&quot;&gt;&lt;/a&gt;1. 从点云创建深度图&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;#include &amp;lt;pcl</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/categories/C/PCL/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>随机采样一致性</title>
    <link href="http://hutalk.top/2024/11/21/%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <id>http://hutalk.top/2024/11/21/%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%E4%B8%80%E8%87%B4%E6%80%A7/</id>
    <published>2024-11-21T09:28:05.000Z</published>
    <updated>2024-11-21T09:28:25.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-随机采样一致性算法"><a href="#1-随机采样一致性算法" class="headerlink" title="1. 随机采样一致性算法"></a>1. 随机采样一致性算法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/console/parse.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/sample_consensus/ransac.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/sample_consensus/sac_model_plane.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/sample_consensus/sac_model_sphere.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开3D可视化窗口</span></span><br><span class="line"><span class="function">boost::shared_ptr&lt;pcl::visualization::PCLVisualizer&gt; <span class="title">simpleVis</span> <span class="params">(pcl::PointCloud&lt;pcl::PointXYZ&gt;::ConstPtr cloud)</span></span>&#123;</span><br><span class="line">    <span class="function">boost::shared_ptr&lt;pcl::visualization::PCLVisualizer&gt; <span class="title">viewer</span> <span class="params">(<span class="keyword">new</span> pcl::visualization::PCLVisualizer (<span class="string">&quot;3D Viewer&quot;</span>))</span></span>;</span><br><span class="line">    viewer-&gt;<span class="built_in">setBackgroundColor</span> (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    viewer-&gt;<span class="built_in">addPointCloud</span>&lt;pcl::PointXYZ&gt; (cloud, <span class="string">&quot;sample cloud&quot;</span>);</span><br><span class="line">    viewer-&gt;<span class="built_in">setPointCloudRenderingProperties</span> (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, <span class="number">1</span>, <span class="string">&quot;sample cloud&quot;</span>);</span><br><span class="line">    viewer-&gt;<span class="built_in">addCoordinateSystem</span> (<span class="number">1.0</span>);</span><br><span class="line">    viewer-&gt;<span class="built_in">initCameraParameters</span> ();</span><br><span class="line">    <span class="keyword">return</span> (viewer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span>&#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>; <span class="comment">// 存储源点云</span></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">final</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>; <span class="comment">// 存储最终点云</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填充点云</span></span><br><span class="line">    cloud-&gt;width = <span class="number">500</span>;</span><br><span class="line">    cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">    cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">    cloud-&gt;points.<span class="built_in">resize</span> (cloud-&gt;width * cloud-&gt;height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span> (); ++i)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pcl::console::<span class="built_in">find_argument</span>(argc, argv, <span class="string">&quot;-s&quot;</span>) &gt;= <span class="number">0</span> || pcl::console::<span class="built_in">find_argument</span>(argc, argv, <span class="string">&quot;-sf&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            cloud-&gt;points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            cloud-&gt;points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">                cloud-&gt;points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                cloud-&gt;points[i].z = <span class="built_in">sqrt</span>(<span class="number">1</span> - (cloud-&gt;points[i].x * cloud-&gt;points[i].x) - (cloud-&gt;points[i].y * cloud-&gt;points[i].y));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cloud-&gt;points[i].z = <span class="number">-1</span> * <span class="built_in">sqrt</span>(<span class="number">1</span> - (cloud-&gt;points[i].x * cloud-&gt;points[i].x) - (cloud-&gt;points[i].y * cloud-&gt;points[i].y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cloud-&gt;points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            cloud-&gt;points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">                cloud-&gt;points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cloud-&gt;points[i].z = <span class="number">-1</span> * (cloud-&gt;points[i].x + cloud-&gt;points[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; inliers; <span class="comment">// 存储内点索引</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建随机采样一致性对象</span></span><br><span class="line">    <span class="comment">// 针对球模型</span></span><br><span class="line">    pcl::SampleConsensusModelSphere&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">model_s</span><span class="params">(<span class="keyword">new</span> pcl::SampleConsensusModelSphere&lt;pcl::PointXYZ&gt;(cloud))</span></span>;</span><br><span class="line">    <span class="comment">// 针对平面模型</span></span><br><span class="line">    pcl::SampleConsensusModelPlane&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">model_p</span><span class="params">(<span class="keyword">new</span> pcl::SampleConsensusModelPlane&lt;pcl::PointXYZ&gt;(cloud))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据命令行参数选择模型</span></span><br><span class="line">    <span class="comment">// 1. 选择平面模型</span></span><br><span class="line">    <span class="keyword">if</span> (pcl::console::<span class="built_in">find_argument</span>(argc, argv, <span class="string">&quot;-s&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="function">pcl::RandomSampleConsensus&lt;pcl::PointXYZ&gt; <span class="title">ransac</span><span class="params">(model_p)</span></span>;</span><br><span class="line">        ransac.<span class="built_in">setDistanceThreshold</span> (<span class="number">0.01</span>);</span><br><span class="line">        ransac.<span class="built_in">computeModel</span>();</span><br><span class="line">        ransac.<span class="built_in">getInliers</span>(inliers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 选择球模型</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pcl::console::<span class="built_in">find_argument</span>(argc, argv, <span class="string">&quot;-sf&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        pcl::RandomSampleConsensus&lt;pcl::PointXYZ&gt; <span class="built_in">ransac</span>(model_s);</span><br><span class="line">        ransac.<span class="built_in">setDistanceThreshold</span> (<span class="number">0.01</span>);</span><br><span class="line">        ransac.<span class="built_in">computeModel</span>();</span><br><span class="line">        ransac.<span class="built_in">getInliers</span>(inliers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 可视化</span></span><br><span class="line">    <span class="comment">// 复制估算模型的所有局部点到findal中</span></span><br><span class="line">    pcl::<span class="built_in">copyPointCloud</span>(*cloud, inliers, *<span class="keyword">final</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建可视化对象，并加入原始点云或者所有的局部点云</span></span><br><span class="line">    boost::shared_ptr&lt;pcl::visualization::PCLVisualizer&gt; viewer;</span><br><span class="line">    <span class="keyword">if</span> (pcl::console::<span class="built_in">find_argument</span>(argc, argv, <span class="string">&quot;-s&quot;</span>) &gt;= <span class="number">0</span> || pcl::console::<span class="built_in">find_argument</span>(argc, argv, <span class="string">&quot;-sf&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">        viewer = <span class="built_in">simpleVis</span>(<span class="keyword">final</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        viewer = <span class="built_in">simpleVis</span>(cloud);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!viewer-&gt;<span class="built_in">wasStopped</span>())&#123;</span><br><span class="line">        <span class="comment">// viewer-&gt;spinOnce(100);</span></span><br><span class="line">        viewer-&gt;<span class="built_in">spin</span>();</span><br><span class="line">        boost::this_thread::<span class="built_in">sleep</span> (boost::posix_time::<span class="built_in">microseconds</span> (<span class="number">100000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.&#x2F;RandomSampleConsensus<br><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/imgs/imgs20240726153047.png?watermark/2/text/QOiDoeS-g-acieaWmQ/fill/I0ZBMEQwRA/fontsize/15" alt="20240726153047"></p><p>.&#x2F;RandomSampleConsensus -s</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/imgs/imgs20240726153358.png?watermark/2/text/QOiDoeS-g-acieaWmQ/fill/I0ZBMEQwRA/fontsize/15" alt="20240726153358"></p><p>.&#x2F;RandomSampleConsensus -sf<br><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/imgs/imgs20240726153322.png?watermark/2/text/QOiDoeS-g-acieaWmQ/fill/I0ZBMEQwRA/fontsize/15" alt="20240726153322"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-随机采样一致性算法&quot;&gt;&lt;a href=&quot;#1-随机采样一致性算法&quot; class=&quot;headerlink&quot; title=&quot;1. 随机采样一致性算法&quot;&gt;&lt;/a&gt;1. 随机采样一致性算法&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/categories/C/PCL/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>octree</title>
    <link href="http://hutalk.top/2024/11/21/octree/"/>
    <id>http://hutalk.top/2024/11/21/octree/</id>
    <published>2024-11-21T09:26:49.000Z</published>
    <updated>2024-11-21T09:27:08.814Z</updated>
    
    <content type="html"><![CDATA[<p>三种搜索方式：</p><ul><li>体素</li><li>K邻域</li><li>搜索半径</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/octree/octree.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    </span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建点云数据</span></span><br><span class="line">    cloud-&gt;width = <span class="number">1000</span>;</span><br><span class="line">    cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">    cloud-&gt;points.<span class="built_in">resize</span>(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line">    <span class="comment">// 创建点云数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        cloud-&gt;points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud-&gt;points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud-&gt;points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 创建 octree</span></span><br><span class="line">    <span class="type">float</span> resolution = <span class="number">128.0f</span>; </span><br><span class="line">    pcl::<span class="function">octree::OctreePointCloudSearch&lt;pcl::PointXYZ&gt; <span class="title">octree</span><span class="params">(resolution)</span></span>;</span><br><span class="line">    octree.<span class="built_in">setInputCloud</span>(cloud); <span class="comment">// 设置输入点云</span></span><br><span class="line">    octree.<span class="built_in">addPointsFromInputCloud</span>(); <span class="comment">// 添加点云数据到 octree</span></span><br><span class="line"></span><br><span class="line">    pcl::PointXYZ searchPoint; <span class="comment">// 设置搜索点</span></span><br><span class="line">    searchPoint.x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    searchPoint.y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    searchPoint.z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 方法1： 体素搜索</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pointIdxVec; <span class="comment">// 存储搜索到的点的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (octree.<span class="built_in">voxelSearch</span>(searchPoint,pointIdxVec))&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Neightbors within voxel search at (&quot;</span> &lt;&lt; searchPoint.x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z &lt;&lt; <span class="string">&quot;): &quot;</span> &lt;&lt; pointIdxVec.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxVec.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxVec[i]].x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxVec[i]].y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxVec[i]].z &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 方法2： K近邻搜索</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pointIdxNKNSearch; <span class="comment">// 存储搜索到的点的索引</span></span><br><span class="line">    std::vector&lt;<span class="type">float</span>&gt; pointNKNSquaredDistance; <span class="comment">// 存储搜索到的点的距离</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;--------------------------------------------------------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout&lt;&lt; <span class="string">&quot;K nearest neighbor search at (&quot;</span> &lt;&lt; searchPoint.x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z &lt;&lt; <span class="string">&quot; ) with K=&quot;</span> &lt;&lt; <span class="number">10</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">if</span> (octree.<span class="built_in">nearestKSearch</span>(searchPoint,<span class="number">10</span>,pointIdxNKNSearch,pointNKNSquaredDistance) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxNKNSearch.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].z &lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointNKNSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 方法3： 半径内搜索</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pointIdxRadiusSearch; <span class="comment">// 存储搜索到的点的索引</span></span><br><span class="line">    std::vector&lt;<span class="type">float</span>&gt; pointRadiusSquaredDistance; <span class="comment">// 存储搜索到的点的距离</span></span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> radius = <span class="number">256.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;--------------------------------------------------------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Neighbors within radius search at (&quot;</span> &lt;&lt; searchPoint.x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z &lt;&lt; <span class="string">&quot;) with radius=&quot;</span> &lt;&lt; radius &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">if</span> (octree.<span class="built_in">radiusSearch</span>(searchPoint, radius, pointIdxRadiusSearch, pointRadiusSquaredDistance) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxRadiusSearch.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].z &lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointRadiusSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;三种搜索方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;体素&lt;/li&gt;
&lt;li&gt;K邻域&lt;/li&gt;
&lt;li&gt;搜索半径&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/categories/C/PCL/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>kdtree</title>
    <link href="http://hutalk.top/2024/11/21/kdtree/"/>
    <id>http://hutalk.top/2024/11/21/kdtree/</id>
    <published>2024-11-21T09:21:43.000Z</published>
    <updated>2024-11-21T09:22:36.607Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/kdtree/kdtree_flann.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span> (<span class="built_in">time</span>(<span class="literal">NULL</span>)); <span class="comment">// 用系统时间初始化</span></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机初始化点云</span></span><br><span class="line">    cloud-&gt;width = <span class="number">1000</span>;</span><br><span class="line">    cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">    cloud-&gt;points.<span class="built_in">resize</span>(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环填充点云</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        cloud-&gt;points[i].x = <span class="number">1024.0</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud-&gt;points[i].y = <span class="number">1024.0</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud-&gt;points[i].z = <span class="number">1024.0</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建KdTreeFLANN对象，并把创建的点云设置为输入，创建一个searchPoint变量作为查询点</span></span><br><span class="line">    pcl::KdTreeFLANN&lt;pcl::PointXYZ&gt; kdtree;</span><br><span class="line">    kdtree.<span class="built_in">setInputCloud</span>(cloud);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置查寻点</span></span><br><span class="line">    pcl::PointXYZ searchPoint;</span><br><span class="line">    searchPoint.x = <span class="number">1024.0</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    searchPoint.y = <span class="number">1024.0</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    searchPoint.z = <span class="number">1024.0</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// K 近邻搜索</span></span><br><span class="line">    <span class="type">int</span> k=<span class="number">10</span>; <span class="comment">// 查询10近邻</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">pointIdxNKNSearch</span><span class="params">(k)</span></span>; <span class="comment">// 存储近邻索引</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">float</span>&gt; <span class="title">pointNKNSquaredDistance</span><span class="params">(k)</span></span>; <span class="comment">// 存储近邻距离</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印搜索点</span></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;k nearest neighbor search at (&quot;</span>&lt;&lt;searchPoint.x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;searchPoint.y&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;searchPoint.z&lt;&lt;<span class="string">&quot;) with k=&quot;</span>&lt;&lt;k&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (kdtree.<span class="built_in">nearestKSearch</span>(searchPoint, k, pointIdxNKNSearch, pointNKNSquaredDistance) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;idx\t&quot;</span> &lt;&lt; <span class="string">&quot;x\t&quot;</span> &lt;&lt; <span class="string">&quot;y\t&quot;</span> &lt;&lt; <span class="string">&quot;z\t&quot;</span> &lt;&lt; <span class="string">&quot; (squared distance)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>; i &lt; pointIdxNKNSearch.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cout &lt;&lt; i &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].z &lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointNKNSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 半径内搜索</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pointIdxRadiusSearch; <span class="comment">// 存储近邻索引</span></span><br><span class="line">    std::vector&lt;<span class="type">float</span>&gt; pointRadiusSquaredDistance; <span class="comment">// 存储近邻距离</span></span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> radius = <span class="number">256.0f</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>); <span class="comment">// 随机生成半径</span></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;--------------------------------------------------------&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;nearest neighbor within radius search at (&quot;</span>&lt;&lt;searchPoint.x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;searchPoint.y&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;searchPoint.z&lt;&lt;<span class="string">&quot;) with radius=&quot;</span>&lt;&lt;radius&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (kdtree.<span class="built_in">radiusSearch</span>(searchPoint, radius, pointIdxRadiusSearch, pointRadiusSquaredDistance) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;idx\t&quot;</span> &lt;&lt; <span class="string">&quot;x\t&quot;</span> &lt;&lt; <span class="string">&quot;y\t&quot;</span> &lt;&lt; <span class="string">&quot;z\t&quot;</span> &lt;&lt; <span class="string">&quot; (squared distance)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>; i &lt; pointIdxRadiusSearch.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cout &lt;&lt; i &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].z &lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointRadiusSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8 FATAL_ERROR)</span><br><span class="line"></span><br><span class="line">project(kdtree_search)</span><br><span class="line"></span><br><span class="line">find_package(PCL 1.2 REQUIRED)</span><br><span class="line"></span><br><span class="line">include_directories(<span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">link_directories(<span class="variable">$&#123;PCL_LIBRARY_DIRS&#125;</span>)</span><br><span class="line">add_definitions(<span class="variable">$&#123;PCL_DEFINITIONS&#125;</span>)</span><br><span class="line"></span><br><span class="line">add_executable (kdtree_search main.cpp)</span><br><span class="line">target_link_libraries (kdtree_search <span class="variable">$&#123;PCL_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/imgs/imgs20240725175751.png?watermark/2/text/QOiDoeS-g-acieaWmQ/fill/I0ZBMEQwRA/fontsize/15" alt="20240725175751"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/categories/C/PCL/"/>
    
    
    <category term="PCL" scheme="http://hutalk.top/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>PCL读写操作</title>
    <link href="http://hutalk.top/2024/11/21/PCL%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/"/>
    <id>http://hutalk.top/2024/11/21/PCL%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/</id>
    <published>2024-11-21T09:14:27.000Z</published>
    <updated>2024-11-21T09:23:25.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-写入数据"><a href="#1-1-写入数据" class="headerlink" title="1.1 写入数据"></a>1.1 写入数据</h2><p>新建项目(文件夹)MYP,在其中新建ma.cpp,代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>              <span class="comment">//标准C++库中的输入输出的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span>           <span class="comment">//PCD读写类相关的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span>      <span class="comment">//PCL中支持的点类型的头文件</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function">  <span class="title">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//实例化的模板类PointCloud  每一个点的类型都设置为pcl::PointXYZ</span></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment"> 点PointXYZ类型对应的数据结构</span></span><br><span class="line"><span class="comment">    Structure PointXYZ&#123;</span></span><br><span class="line"><span class="comment">     float x;</span></span><br><span class="line"><span class="comment">     float y;</span></span><br><span class="line"><span class="comment">     float z;</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">**************************************************/</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt; cloud;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建点云  并设置适当的参数（width height is_dense）</span></span><br><span class="line">  cloud.width    = <span class="number">5</span>;</span><br><span class="line">  cloud.height   = <span class="number">1</span>;</span><br><span class="line">  cloud.is_dense = <span class="literal">false</span>;  <span class="comment">//不是稠密型的</span></span><br><span class="line">  cloud.points.<span class="built_in">resize</span> (cloud.width * cloud.height);  <span class="comment">//点云总数大小</span></span><br><span class="line">   <span class="comment">//用随机数的值填充PointCloud点云对象 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud.points.<span class="built_in">size</span> (); ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    cloud.points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span> () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud.points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span> () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud.points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span> () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//把PointCloud对象数据存储在 test_pcd.pcd文件中</span></span><br><span class="line">  pcl::io::<span class="built_in">savePCDFileASCII</span> (<span class="string">&quot;test_pcd.pcd&quot;</span>, cloud);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印输出存储的点云数据</span></span><br><span class="line">  std::cerr &lt;&lt; <span class="string">&quot;Saved &quot;</span> &lt;&lt; cloud.points.<span class="built_in">size</span> () &lt;&lt; <span class="string">&quot; data points to test_pcd.pcd.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud.points.<span class="built_in">size</span> (); ++i)</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud.points[i].x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud.points[i].y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud.points[i].z &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在新一个CMakeLists.txt，添加如下：<br>主要干这么几件事：</p><ul><li>指定cmake版本，</li><li>添加用到的库</li><li>生成可执行文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required ( VERSION 2.6 FATAL_ERROR)   <span class="comment">#对于cmake版本的最低版本的要求</span></span><br><span class="line">project(Towrite)                                        <span class="comment">#建立的工程名，例如源代码目录路径的变量名为CH_DIR</span></span><br><span class="line">                                                    <span class="comment">#工程存储目录变量名为CH_BINARY_DIR</span></span><br><span class="line"><span class="comment">#要求工程依赖的PCL最低版本为1.3，并且版本至少包含common和IO两个模块  这里的REQUIRED意味着如果对应的库找不到 则CMake配置的过程将完全失败，</span></span><br><span class="line"><span class="comment">#因为PCL是模块化的，也可以如下操作：</span></span><br><span class="line"><span class="comment">#           一个组件  find_package(PCL 1.6 REQUIRED COMPONENTS  io)</span></span><br><span class="line"><span class="comment">#           多个组件  find_package(PCL 1.6 REQUIRED COMPONENTS commom io)</span></span><br><span class="line"><span class="comment">#           所有组件  find_package(PCL 1.6 REQUIRED )                    </span></span><br><span class="line">find_package(PCL  REQUIRED)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面的语句是利用CMake的宏完成对PCL的头文件路径和链接路径变量的配置和添加，如果缺少下面几行，生成文件的过程中就会提示</span></span><br><span class="line"><span class="comment">#找不到相关的头文件，在配置CMake时，当找到了安装的PCL，下面相关的包含的头文件，链接库，路径变量就会自动设置</span></span><br><span class="line"><span class="comment">#                    PCL_FOUND:如果找到了就会被设置为1 ，否则就不设置</span></span><br><span class="line"><span class="comment">#                    PCL_INCLUDE_DIRS:被设置为PCL安装的头文件和依赖头文件的目录</span></span><br><span class="line"><span class="comment">#                    PCL_LIBRARIES:被设置成所建立和安装的PCL库头文件</span></span><br><span class="line"><span class="comment">#                    PCL_LIBRARIES_DIRS:被设置成PCL库和第三方依赖的头文件所在的目录</span></span><br><span class="line"><span class="comment">#                    PCL_VERSION:所找到的PCL的版本</span></span><br><span class="line"><span class="comment">#                    PCL_COMPONENTS:列出所有可用的组件</span></span><br><span class="line"><span class="comment">#                    PCL_DEFINITIONS:列出所需要的预处理器定义和编译器标志</span></span><br><span class="line">include_directories(<span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">link_directories(<span class="variable">$&#123;PCL_LIBRARIES_DIRS&#125;</span>)</span><br><span class="line">add_definitions(<span class="variable">$&#123;PCL_DEFINITIONS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这句话告诉CMake从单个源文件mmmy_writer建立一个可执行文件</span></span><br><span class="line">add_executable(mmmy_writer main.cpp)</span><br><span class="line"><span class="comment">#虽然包含了PCL的头文件，因此编译器知道我们现在访问所用的方法，我们也需要让链接器知道所链接的库，PCL找到库文件由</span></span><br><span class="line"><span class="comment">#PCL_COMMON_LIBRARIES变量指示，通过target_link_libraries这个宏来出发链接操作</span></span><br><span class="line">target_link_libraries(mmmy_writer <span class="variable">$&#123;PCL_COMMON_LIBRARIES&#125;</span> <span class="variable">$&#123;PCL_IO_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><p>在当前路径下打开终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./mmmy_writer</span><br></pre></td></tr></table></figure><p>如果正常的话，build文件夹会生成可执行程序mmmy_writer，并运行，终端会输出结果如下：<br><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/imgs/imgs20240723174024.png?watermark/2/text/QOiDoeS-g-acieaWmQ/fill/I0ZBMEQwRA/fontsize/15" alt="20240723174024"></p><h2 id="1-2-读取数据"><a href="#1-2-读取数据" class="headerlink" title="1.2 读取数据"></a>1.2 读取数据</h2><p>在ma.cpp中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>              <span class="comment">//标准C++库中的输入输出的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span>       <span class="comment">//PCD读写类相关的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span>     <span class="comment">//PCL中支持的点类型的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="comment">//创建一个PointCloud&lt;pcl::PointXYZ&gt;    boost共享指针并进行实例化</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">  std::cout&lt;&lt;<span class="string">&quot;read pcl&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//打开点云文件</span></span><br><span class="line">  <span class="keyword">if</span> (pcl::io::<span class="built_in">loadPCDFile</span>&lt;pcl::PointXYZ&gt; (<span class="string">&quot;test_pcd.pcd&quot;</span>, *cloud) == <span class="number">-1</span>) </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">PCL_ERROR</span> (<span class="string">&quot;Couldn&#x27;t read file test_pcd.pcd \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//默认就是而二进制块读取转换为模块化的PointCLoud格式里pcl::PointXYZ作为点类型  然后打印出来</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Loaded &quot;</span></span><br><span class="line">            &lt;&lt; cloud-&gt;width * cloud-&gt;height</span><br><span class="line">            &lt;&lt; <span class="string">&quot; data points from test_pcd.pcd with the following fields: &quot;</span></span><br><span class="line">            &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span> (); ++i)</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[i].x</span><br><span class="line">              &lt;&lt; <span class="string">&quot; &quot;</span>    &lt;&lt; cloud-&gt;points[i].y</span><br><span class="line">              &lt;&lt; <span class="string">&quot; &quot;</span>    &lt;&lt; cloud-&gt;points[i].z &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">return</span> (<span class="number">-1</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-1-写入数据&quot;&gt;&lt;a href=&quot;#1-1-写入数据&quot; class=&quot;headerlink&quot; title=&quot;1.1 写入数据&quot;&gt;&lt;/a&gt;1.1 写入数据&lt;/h2&gt;&lt;p&gt;新建项目(文件夹)MYP,在其中新建ma.cpp,代码如下&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/categories/C/PCL/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hutalk.top/2024/11/21/hello-world/"/>
    <id>http://hutalk.top/2024/11/21/hello-world/</id>
    <published>2024-11-21T08:31:31.376Z</published>
    <updated>2024-11-21T08:31:31.376Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python执行js文件并传递参数方法</title>
    <link href="http://hutalk.top/2023/10/28/python%E6%89%A7%E8%A1%8Cjs%E6%96%87%E4%BB%B6%E5%B9%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95/"/>
    <id>http://hutalk.top/2023/10/28/python%E6%89%A7%E8%A1%8Cjs%E6%96%87%E4%BB%B6%E5%B9%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95/</id>
    <published>2023-10-28T07:46:13.000Z</published>
    <updated>2024-11-21T08:31:31.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>在python中执行js文件，并向其中传递参数，注意，是向整个js文件传递参数，而不是向其中的函数</p><h1 id="1-方法一"><a href="#1-方法一" class="headerlink" title="1. 方法一"></a>1. 方法一</h1><p>该方法会执行整个js文件，并将其中的输出结果作为返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = subprocess.run([<span class="string">&quot;node&quot;</span>, <span class="string">&quot;t4.js&quot;</span>, <span class="built_in">id</span>,pageNo,ts], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231028155015692.png" alt="image-20231028155015692"></p><h2 id="1-1-测试案例"><a href="#1-1-测试案例" class="headerlink" title="1.1 测试案例"></a>1.1 测试案例</h2><h3 id="1-1-1-js文件"><a href="#1-1-1-js文件" class="headerlink" title="1.1.1 js文件"></a>1.1.1 js文件</h3><p>js文件中参数接受形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> args = process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> id = args[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> page = args[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> ts = args[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><h3 id="1-1-2-python文件"><a href="#1-1-2-python文件" class="headerlink" title="1.1.2 python文件"></a>1.1.2 python文件</h3><p>python中调用js代码案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"><span class="comment"># 定义要传递的参数</span></span><br><span class="line"><span class="comment"># id = &quot;12345&quot;</span></span><br><span class="line"><span class="built_in">id</span>=<span class="string">&quot;2090350703&quot;</span></span><br><span class="line">pageNo=<span class="string">&#x27;17&#x27;</span></span><br><span class="line">ts=<span class="string">&#x27;465465498&#x27;</span></span><br><span class="line"><span class="comment"># 启动一个新的子进程，并执行JavaScript文件</span></span><br><span class="line">result = subprocess.run([<span class="string">&quot;node&quot;</span>, <span class="string">&quot;t4.js&quot;</span>,  <span class="built_in">id</span>,pageNo,ts], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出子进程的标准输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==============&#x27;</span>)</span><br><span class="line">output = result.stdout.strip()</span><br><span class="line">output = output.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">output = output.replace(<span class="string">&quot;encText:&quot;</span>, <span class="string">&#x27;&quot;encText&quot;:&#x27;</span>)</span><br><span class="line">output = output.replace(<span class="string">&quot;encSecKey:&quot;</span>, <span class="string">&#x27;&quot;encSecKey&quot;:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==============&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231028155249238.png" alt="image-20231028155249238"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h1&gt;&lt;p&gt;在python中执行js文件，并向其中传递参数，注意，是向整个js文件传递参数，而不是向其中的函数&lt;/p&gt;
&lt;h1 id</summary>
      
    
    
    
    <category term="js逆向" scheme="http://hutalk.top/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向" scheme="http://hutalk.top/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>js逆向之网易云音乐评论</title>
    <link href="http://hutalk.top/2023/10/15/js%E9%80%86%E5%90%91%E4%B9%8B%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E8%AF%84%E8%AE%BA/"/>
    <id>http://hutalk.top/2023/10/15/js%E9%80%86%E5%90%91%E4%B9%8B%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E8%AF%84%E8%AE%BA/</id>
    <published>2023-10-15T13:47:07.000Z</published>
    <updated>2024-11-21T08:31:31.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-参数定位"><a href="#1-参数定位" class="headerlink" title="1. 参数定位"></a>1. 参数定位</h1><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231015214834638.png" alt="image-20231015214834638"></p><p>对请求的链接下断点，跟着栈，就能很容易的追踪到这两个参数的位置</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231015230921992.png" alt="image-20231015230921992"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bKC6w = <span class="variable language_">window</span>.<span class="title function_">asrsea</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(i8a), <span class="title function_">bvh7a</span>([<span class="string">&quot;流泪&quot;</span>, <span class="string">&quot;强&quot;</span>]), <span class="title function_">bvh7a</span>(<span class="title class_">Re1</span>x.<span class="property">md</span>), <span class="title function_">bvh7a</span>([<span class="string">&quot;爱心&quot;</span>, <span class="string">&quot;女孩&quot;</span>, <span class="string">&quot;惊恐&quot;</span>, <span class="string">&quot;大笑&quot;</span>]));</span><br><span class="line">            e8e.<span class="property">data</span> = j8b.<span class="title function_">cr9i</span>(&#123;</span><br><span class="line">                <span class="attr">params</span>: bKC6w.<span class="property">encText</span>,</span><br><span class="line">                <span class="attr">encSecKey</span>: bKC6w.<span class="property">encSecKey</span></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><p>先找<code>window.asrsea</code>，发现在上面</p><p><img src="D:\Data_saved\Desktop\个人项目\blog\hexotools\source_posts\js逆向之网易云音乐评论.assets\image-20231016210017759.png" alt="image-20231016210017759"></p><p>代码复制如下，可以发现是一个自执行函数,函数d里面调用的函数都在这里面，nice</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d, e, b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>, c = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (d = <span class="number">0</span>; a &gt; d; d += <span class="number">1</span>)</span><br><span class="line">            e = <span class="title class_">Math</span>.<span class="title function_">random</span>() * b.<span class="property">length</span>,</span><br><span class="line">            e = <span class="title class_">Math</span>.<span class="title function_">floor</span>(e),</span><br><span class="line">            c += b.<span class="title function_">charAt</span>(e);</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(b)</span><br><span class="line">          , d = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&quot;0102030405060708&quot;</span>)</span><br><span class="line">          , e = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(a)</span><br><span class="line">          , f = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(e, c, &#123;</span><br><span class="line">            <span class="attr">iv</span>: d,</span><br><span class="line">            <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> f.<span class="title function_">toString</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d, e;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">setMaxDigits</span>(<span class="number">131</span>),</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">RSAKeyPair</span>(b,<span class="string">&quot;&quot;</span>,c),</span><br><span class="line">        e = <span class="title function_">encryptedString</span>(d, a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params">d, e, f, g</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> h = &#123;&#125;</span><br><span class="line">          , i = <span class="title function_">a</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> h.<span class="property">encText</span> = <span class="title function_">b</span>(d, g),</span><br><span class="line">        h.<span class="property">encText</span> = <span class="title function_">b</span>(h.<span class="property">encText</span>, i),</span><br><span class="line">        h.<span class="property">encSecKey</span> = <span class="title function_">c</span>(i, e, f),</span><br><span class="line">        h</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">a, b, d, e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> f = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> f.<span class="property">encText</span> = <span class="title function_">c</span>(a + e, b, d),</span><br><span class="line">        f</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">asrsea</span> = d,</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">ecnonasr</span> = e</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h1 id="2-函数分析"><a href="#2-函数分析" class="headerlink" title="2. 函数分析"></a>2. 函数分析</h1><p>我们再回到参数加密的地方，<code>window.asrea</code>有四个参数，每个参数由函数生成。后三个参数所以对应的函数，里面传递的是固定的参数，猜测其是固定的。</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231016213019815.png" alt="image-20231016213019815"></p><p>我们直接在函数d下个断点，第一个参数有了</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231025213121928.png" alt="image-20231025213121928"></p><p>翻到第二页，看看参数有什么变化</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231025213327523.png" alt="image-20231025213327523"></p><p>我们翻到第2页，重新下端，发现不变，只是多了一个id，暂时不管。让我们深入分析一下函数d。</p><p>函数d里面的i是由随机数生成的，如下。</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231016220533605.png" alt="image-20231016220533605"></p><p>再来分析函数b,可以很容易看到函数b是aes加密，23333，函数c是rsa加密。</p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h1><p>接下来就是常规讨论扣代码了，一杯茶一包烟，一天过去了，，，，</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231111102946462.png" alt="image-20231111102946462"></p><p>结果如下：</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231111104708281.png" alt="image-20231111104708281"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-参数定位&quot;&gt;&lt;a href=&quot;#1-参数定位&quot; class=&quot;headerlink&quot; title=&quot;1. 参数定位&quot;&gt;&lt;/a&gt;1. 参数定位&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://typora-blog-image-1311260816.cos.a</summary>
      
    
    
    
    <category term="js逆向" scheme="http://hutalk.top/categories/js%E9%80%86%E5%90%91/"/>
    
    <category term="案例" scheme="http://hutalk.top/categories/js%E9%80%86%E5%90%91/%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="js逆向" scheme="http://hutalk.top/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>jsrpc</title>
    <link href="http://hutalk.top/2023/10/12/jsrpc/"/>
    <id>http://hutalk.top/2023/10/12/jsrpc/</id>
    <published>2023-10-12T13:52:00.000Z</published>
    <updated>2024-11-21T08:31:31.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p><strong>一句话概括一下rpc在爬虫中应用</strong>: 在浏览器（作为我们的客户端）找到加密后的参数，然后发送给服务端（python编写的一个本地服务），最后真正爬虫的时候调用这个服务就能获取加密数据了。不需要扣代码和补环境那些。</p><h1 id="1-从WebSocket认识rpc"><a href="#1-从WebSocket认识rpc" class="headerlink" title="1. 从WebSocket认识rpc"></a>1. 从WebSocket认识rpc</h1><blockquote><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p><p>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p><p>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p></blockquote><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231012215503336.png" alt="image-20231012215503336"></p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231014115242796.png" alt="image-20231014115242796"></p><hr><p>简单来说，就是分为服务端和客户端，客户端想服务发送请求，会获取相应的响应。类似你打开<code>www.baidu.com</code>会得到一个百度首页一样。话不多说，直接看例子：</p><h2 id="1-1-python中"><a href="#1-1-python中" class="headerlink" title="1.1 python中"></a>1.1 python中</h2><p>建立服务端server.py，会在本地构建websocket服务器，端口8010启动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">echo</span>(<span class="params">websocket, path</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> message <span class="keyword">in</span> websocket:</span><br><span class="line">        message = <span class="string">&quot;I got your message: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(message)</span><br><span class="line">        <span class="keyword">await</span> websocket.send(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(websockets.serve(echo, <span class="string">&#x27;localhost&#x27;</span>, <span class="number">8010</span>))</span><br><span class="line">asyncio.get_event_loop().run_forever()</span><br></pre></td></tr></table></figure><p>建立客户端client.py，和指定的url建立websocket连接，并发送消息，等待接受消息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">echo</span>(<span class="params">websocket, path</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> message <span class="keyword">in</span> websocket:</span><br><span class="line">        message = <span class="string">&quot;I got your message: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(message)</span><br><span class="line">        <span class="keyword">await</span> websocket.send(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(websockets.serve(echo, <span class="string">&#x27;localhost&#x27;</span>, <span class="number">8765</span>))</span><br><span class="line">asyncio.get_event_loop().run_forever()</span><br></pre></td></tr></table></figure><p>先执行server.py让服务端运行起来，再运行client.py会得到如下：</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231012220155586.png" alt="image-20231012220155586"></p><h2 id="1-2-js中"><a href="#1-2-js中" class="headerlink" title="1.2 js中"></a>1.2 js中</h2><p>服务端依然上面的python代码，客户端为js代码，在控制台输入如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">ws</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://127.0.0.1:8010/&#x27;</span>);</span><br><span class="line">    ws.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接服务器成功&quot;</span>);</span><br><span class="line">        ws.<span class="title function_">send</span>(<span class="string">&quot;Browser start&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器关闭&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接出错&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">evt</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data:--》》&quot;</span>,evt.<span class="property">data</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cookie:---&gt;&gt;&gt;&quot;</span>,<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231013214120167.png" alt="image-20231013214120167"></p><p>这也是纯手工rpc的雏形。在本地建立服务端，浏览器作为客户端发送加密参数（这里以cookie举例）</p><p><strong>说明：</strong> 实际使用会对js代码进行override，更普遍的方式是采用后面介绍的框架进行。</p><h1 id="2-jsrpc"><a href="#2-jsrpc" class="headerlink" title="2. jsrpc"></a>2. jsrpc</h1><h2 id="2-1-下载运行开启服务端"><a href="#2-1-下载运行开启服务端" class="headerlink" title="2.1 下载运行开启服务端"></a>2.1 下载运行开启服务端</h2><p>下载编译好的文件：<a href="https://github.com/jxhczhl/JsRpc">jxhczhl&#x2F;JsRpc</a>，运行开启服务</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231014112752350.png" alt="image-20231014112752350"></p><h2 id="2-2-定义客户端函数"><a href="#2-2-定义客户端函数" class="headerlink" title="2.2 定义客户端函数"></a>2.2 定义客户端函数</h2><p>复制JsEnv中的代码粘贴到网站控制台</p><p><strong>说明：</strong> 定义相关函数，后续使用</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231014113721285.png" alt="image-20231014113721285"></p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231014113604463.png" alt="image-20231014113604463"></p><h2 id="2-3-注入，发送加密数据"><a href="#2-3-注入，发送加密数据" class="headerlink" title="2.3 注入，发送加密数据"></a>2.3 注入，发送加密数据</h2><p>注入ws与方法，在控制台输入如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接通信</span></span><br><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> <span class="title class_">Hlclient</span>(<span class="string">&quot;ws://127.0.0.1:12080/ws?group=hhh&amp;name=baidu&quot;</span>);</span><br><span class="line"><span class="comment">// 注册一个方法 第一个参数hello为方法名，</span></span><br><span class="line"><span class="comment">// 第二个参数为函数，resolve里面的值是想要的值(发送到服务器的)</span></span><br><span class="line"><span class="comment">// param是可传参参数，可以忽略</span></span><br><span class="line">demo.<span class="title function_">regAction</span>(<span class="string">&quot;hello&quot;</span>, <span class="keyword">function</span> (<span class="params">resolve, param</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="string">&quot;好困啊&quot;</span> + param;</span><br><span class="line">    <span class="title function_">resolve</span>(c);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231014113950153.png" alt="image-20231014113950153"></p><h2 id="2-4-访问获取数据"><a href="#2-4-访问获取数据" class="headerlink" title="2.4 访问获取数据"></a>2.4 访问获取数据</h2><p>访问链接：<a href="http://127.0.0.1:12080/go?group=hhh&name=baidu&action=hello&param=yes">http://127.0.0.1:12080/go?group=hhh&amp;name=baidu&amp;action=hello&amp;param=yes</a></p><p>会的到如下结果：</p><p>这样我们就可能访问链接得到加密结果啦</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231014114125379.png" alt="image-20231014114125379"></p><h1 id="3-serkio"><a href="#3-serkio" class="headerlink" title="3. serkio"></a>3. serkio</h1><h2 id="3-1-下载安装运行"><a href="#3-1-下载安装运行" class="headerlink" title="3.1 下载安装运行"></a>3.1 下载安装运行</h2><p>下载：<a href="https://github.com/virjar/sekiro">https://github.com/virjar/sekiro</a></p><p>需要安装java和maven，运行代码中的build_demo_server.sh</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231015204809836.png" alt="image-20231015204809836"></p><p>会生成target文件夹，</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231015205015227.png" alt="image-20231015205015227"></p><p>window运行里面的bat文件</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231015205108359.png" alt="image-20231015205108359"></p><p><strong>说明：</strong> 也可以直接下载<a href="https://oss.iinti.cn/sekiro/sekiro-demo">Go HTTP File Server (iinti.cn)</a></p><h2 id="3-2-客户端（js-发送信息"><a href="#3-2-客户端（js-发送信息" class="headerlink" title="3.2 客户端（js)发送信息"></a>3.2 客户端（js)发送信息</h2><p>打开文档<a href="http://sekiro.iinti.cn/sekiro-doc/01_manual/1.quickstart.html#android-xposed">快速上手 | sekiro (iinti.cn)</a>，复制浏览器js环境中代码，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SekiroClient</span>(<span class="params">e</span>)&#123;<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">wsURL</span>=e,<span class="variable language_">this</span>.<span class="property">handlers</span>=&#123;&#125;,<span class="variable language_">this</span>.<span class="property">socket</span>=&#123;&#125;,!e)<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;wsURL can not be empty!!&quot;</span>);<span class="variable language_">this</span>.<span class="property">webSocketFactory</span>=<span class="variable language_">this</span>.<span class="title function_">resolveWebSocketFactory</span>(),<span class="variable language_">this</span>.<span class="title function_">connect</span>()&#125;<span class="title class_">SekiroClient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">resolveWebSocketFactory</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">if</span>(<span class="string">&quot;object&quot;</span>==<span class="keyword">typeof</span> <span class="variable language_">window</span>)&#123;<span class="keyword">var</span> e=<span class="variable language_">window</span>.<span class="property">WebSocket</span>?<span class="variable language_">window</span>.<span class="property">WebSocket</span>:<span class="variable language_">window</span>.<span class="property">MozWebSocket</span>;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">o</span>)&#123;<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params">o</span>)&#123;<span class="variable language_">this</span>.<span class="property">mSocket</span>=<span class="keyword">new</span> <span class="title function_">e</span>(o)&#125;<span class="keyword">return</span> t.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">close</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">mSocket</span>.<span class="title function_">close</span>()&#125;,t.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">onmessage</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="variable language_">this</span>.<span class="property">mSocket</span>.<span class="property">onmessage</span>=e&#125;,t.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">onopen</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="variable language_">this</span>.<span class="property">mSocket</span>.<span class="property">onopen</span>=e&#125;,t.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">onclose</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="variable language_">this</span>.<span class="property">mSocket</span>.<span class="property">onclose</span>=e&#125;,t.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="variable language_">this</span>.<span class="property">mSocket</span>.<span class="title function_">send</span>(e)&#125;,<span class="keyword">new</span> <span class="title function_">t</span>(o)&#125;&#125;<span class="keyword">if</span>(<span class="string">&quot;object&quot;</span>==<span class="keyword">typeof</span> weex)<span class="keyword">try</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test webSocket for weex&quot;</span>);<span class="keyword">var</span> o=weex.requireModule(<span class="string">&quot;webSocket&quot;</span>);<span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;find webSocket for weex:&quot;</span>+o),<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">try</span>&#123;o.<span class="title function_">close</span>()&#125;<span class="keyword">catch</span>(e)&#123;&#125;<span class="keyword">return</span> o.<span class="title class_">WebSocket</span>(e,<span class="string">&quot;&quot;</span>),o&#125;&#125;<span class="keyword">catch</span>(e)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(e)&#125;<span class="keyword">if</span>(<span class="string">&quot;object&quot;</span>==<span class="keyword">typeof</span> <span class="title class_">WebSocket</span>)<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">o</span>)&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">e</span>(o)&#125;;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;the js environment do not support websocket&quot;</span>)&#125;,<span class="title class_">SekiroClient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">connect</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro: begin of connect to wsURL: &quot;</span>+<span class="variable language_">this</span>.<span class="property">wsURL</span>);<span class="keyword">var</span> e=<span class="variable language_">this</span>;<span class="keyword">try</span>&#123;<span class="variable language_">this</span>.<span class="property">socket</span>=<span class="variable language_">this</span>.<span class="title function_">webSocketFactory</span>(<span class="variable language_">this</span>.<span class="property">wsURL</span>)&#125;<span class="keyword">catch</span>(o)&#123;<span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro: create connection failed,reconnect after 2s:&quot;</span>+o),<span class="keyword">void</span> <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;e.<span class="title function_">connect</span>()&#125;,<span class="number">2e3</span>)&#125;<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">onmessage</span>(<span class="keyword">function</span>(<span class="params">o</span>)&#123;e.<span class="title function_">handleSekiroRequest</span>(o.<span class="property">data</span>)&#125;),<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">onopen</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro: open a sekiro client connection&quot;</span>)&#125;),<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">onclose</span>(<span class="keyword">function</span>(<span class="params">o</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro: disconnected ,reconnection after 2s&quot;</span>),<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;e.<span class="title function_">connect</span>()&#125;,<span class="number">2e3</span>)&#125;)&#125;,<span class="title class_">SekiroClient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">handleSekiroRequest</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;receive sekiro request: &quot;</span>+e);<span class="keyword">var</span> o=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(e),t=o.<span class="property">__sekiro_seq__</span>;<span class="keyword">if</span>(o.<span class="property">action</span>)&#123;<span class="keyword">var</span> n=o.<span class="property">action</span>;<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">handlers</span>[n])&#123;<span class="keyword">var</span> s=<span class="variable language_">this</span>.<span class="property">handlers</span>[n],i=<span class="variable language_">this</span>;<span class="keyword">try</span>&#123;<span class="title function_">s</span>(o,<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">try</span>&#123;i.<span class="title function_">sendSuccess</span>(t,e)&#125;<span class="keyword">catch</span>(e)&#123;i.<span class="title function_">sendFailed</span>(t,<span class="string">&quot;e:&quot;</span>+e)&#125;&#125;,<span class="keyword">function</span>(<span class="params">e</span>)&#123;i.<span class="title function_">sendFailed</span>(t,e)&#125;)&#125;<span class="keyword">catch</span>(e)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error: &quot;</span>+e),i.<span class="title function_">sendFailed</span>(t,<span class="string">&quot;:&quot;</span>+e)&#125;&#125;<span class="keyword">else</span> <span class="variable language_">this</span>.<span class="title function_">sendFailed</span>(t,<span class="string">&quot;no action handler: &quot;</span>+n+<span class="string">&quot; defined&quot;</span>)&#125;<span class="keyword">else</span> <span class="variable language_">this</span>.<span class="title function_">sendFailed</span>(t,<span class="string">&quot;need request param &#123;action&#125;&quot;</span>)&#125;,<span class="title class_">SekiroClient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sendSuccess</span>=<span class="keyword">function</span>(<span class="params">e,o</span>)&#123;<span class="keyword">var</span> t;<span class="keyword">if</span>(<span class="string">&quot;string&quot;</span>==<span class="keyword">typeof</span> o)<span class="keyword">try</span>&#123;t=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(o)&#125;<span class="keyword">catch</span>(e)&#123;(t=&#123;&#125;).<span class="property">data</span>=o&#125;<span class="keyword">else</span><span class="string">&quot;object&quot;</span>==<span class="keyword">typeof</span> o?t=<span class="attr">o</span>:(t=&#123;&#125;).<span class="property">data</span>=o;(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(t)||<span class="string">&quot;string&quot;</span>==<span class="keyword">typeof</span> t)&amp;&amp;(t=&#123;<span class="attr">data</span>:t,<span class="attr">code</span>:<span class="number">0</span>&#125;),t.<span class="property">code</span>?t.<span class="property">code</span>=<span class="number">0</span>:(t.<span class="property">status</span>,t.<span class="property">status</span>=<span class="number">0</span>),t.<span class="property">__sekiro_seq__</span>=e;<span class="keyword">var</span> n=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(t);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;response :&quot;</span>+n),<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">send</span>(n)&#125;,<span class="title class_">SekiroClient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sendFailed</span>=<span class="keyword">function</span>(<span class="params">e,o</span>)&#123;<span class="string">&quot;string&quot;</span>!=<span class="keyword">typeof</span> o&amp;&amp;(o=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(o));<span class="keyword">var</span> t=&#123;&#125;;t.<span class="property">message</span>=o,t.<span class="property">status</span>=-<span class="number">1</span>,t.<span class="property">__sekiro_seq__</span>=e;<span class="keyword">var</span> n=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(t);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro: response :&quot;</span>+n),<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">send</span>(n)&#125;,<span class="title class_">SekiroClient</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">registerAction</span>=<span class="keyword">function</span>(<span class="params">e,o</span>)&#123;<span class="keyword">if</span>(<span class="string">&quot;string&quot;</span>!=<span class="keyword">typeof</span> e)<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;an action must be string&quot;</span>);<span class="keyword">if</span>(<span class="string">&quot;function&quot;</span>!=<span class="keyword">typeof</span> o)<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;a handler must be function&quot;</span>);<span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro: register action: &quot;</span>+e),<span class="variable language_">this</span>.<span class="property">handlers</span>[e]=o,<span class="variable language_">this</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> <span class="title class_">SekiroClient</span>(<span class="string">&quot;ws://127.0.0.1:5612/business/register?group=test_web&amp;clientId=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">client.<span class="title function_">registerAction</span>(<span class="string">&quot;testAction&quot;</span>, <span class="keyword">function</span> (<span class="params">request, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 修改了链接，改为<code>&quot;ws://127.0.0.1</code>这个。</p><p>可以访问<a href="http://127.0.0.1:5612/business/groupList">127.0.0.1:5612&#x2F;business&#x2F;groupList</a>，查查看分组</p><hr><h2 id="3-3-python访问服务端使用"><a href="#3-3-python访问服务端使用" class="headerlink" title="3.3 python访问服务端使用"></a>3.3 python访问服务端使用</h2><p>python中使用，如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;test_web&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;testAction&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(<span class="string">&quot;http://127.0.0.1:5612/business/invoke&quot;</span>, params=data, headers=&#123;<span class="string">&#x27;Connection&#x27;</span>:<span class="string">&#x27;close&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231015212244258.png" alt="image-20231015212244258"></p><p><strong>注意：</strong> python中的data数据group和action和上面js中链接保持一致</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20231015212147640.png" alt="image-20231015212147640"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://cloud.tencent.com/developer/article/2074914">Python网络爬虫之js逆向之远程调用(rpc)免去抠代码补环境简介-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>[2] <a href="https://blog.csdn.net/weixin_39198406/article/details/106418574">使用Python创建websocket服务和客户端请求_python websocket客户端接收服务器发送的数据-CSDN博客</a></p><p>[3] <a href="https://www.runoob.com/html/html5-websocket.html">HTML5 WebSocket | 菜鸟教程 (runoob.com)</a></p><p>[4] <a href="https://juejin.cn/post/7076241054684413989">Jsrpc学习——网易云热评加密函数逆向 - 掘金 (juejin.cn)</a></p><p>[5] <a href="https://blog.csdn.net/weixin_41586246/article/details/131944725">RPC-sekiro，浏览器环境配置sekiro，python调用-CSDN博客</a></p><p>[6] <a href="http://sekiro.iinti.cn/sekiro-doc/01_manual/1.quickstart.html#android-xposed">快速上手 | sekiro (iinti.cn)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;一句话概括一下rpc在爬虫中应用&lt;/strong&gt;: 在浏览器（作为我们的客户端）找到加密后的参数，然后</summary>
      
    
    
    
    <category term="js逆向" scheme="http://hutalk.top/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向" scheme="http://hutalk.top/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>从函数到webpack</title>
    <link href="http://hutalk.top/2023/09/19/%E4%BB%8E%E5%87%BD%E6%95%B0%E5%88%B0webpack/"/>
    <id>http://hutalk.top/2023/09/19/%E4%BB%8E%E5%87%BD%E6%95%B0%E5%88%B0webpack/</id>
    <published>2023-09-19T13:51:03.000Z</published>
    <updated>2024-11-21T08:31:31.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>下面是一个常见的js函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>)&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>)&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>而我们在网站中，常看到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">n</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i[t].<span class="title function_">call</span>(a, b, c, d)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;([</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;&#125;, </span><br><span class="line">    <span class="keyword">function</span>(<span class="params">t, e, n</span>) &#123;&#125;, </span><br><span class="line">    <span class="keyword">function</span>(<span class="params">t, e, r</span>) &#123;&#125;, </span><br><span class="line">    <span class="keyword">function</span>(<span class="params">t, e, o</span>) &#123;&#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>上面的代码，我们对其进行简化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span> (<span class="params">allModule</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">useModule</span>(<span class="params">whichModule</span>) &#123;</span><br><span class="line">        allModule[whichModule].<span class="title function_">call</span>(<span class="literal">null</span>, <span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">useModule</span>(<span class="number">0</span>)</span><br><span class="line">&#125;([</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">module0</span>(<span class="params">param</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;module0: &quot;</span> + param)&#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">module1</span>(<span class="params">param</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;module1: &quot;</span> + param)&#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">module2</span>(<span class="params">param</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;module2: &quot;</span> + param)&#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>运行上面代码，输出：<code>moddul0:hello world!</code></p><p>上面主要用到了<code>！function()&#123;&#125;()</code>和<code>function.call()</code> </p><h1 id="2-函数的声明和表达式"><a href="#2-函数的声明和表达式" class="headerlink" title="2. 函数的声明和表达式"></a>2. 函数的声明和表达式</h1><p>创建函数，有两种方法：</p><ul><li>函数声明</li><li>函数表达式</li></ul><h2 id="2-1-函数声明"><a href="#2-1-函数声明" class="headerlink" title="2.1 函数声明"></a>2.1 函数声明</h2><p>函数声明是通过使用 <code>function</code> 关键字后跟函数名称的方式来创建函数。函数声明会被提升到所在作用域的顶部，可以在声明之前调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;Hello World!&quot;</span>) <span class="comment">// 函数声明之前调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-函数表达式"><a href="#2-2-函数表达式" class="headerlink" title="2.2 函数表达式"></a>2.2 函数表达式</h2><p>函数表达式： 函数表达式是将函数赋值给变量或属性的方式来创建函数。函数表达式不会被提升，只能在赋值<strong>之后</strong>调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span> (<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>函数表达式也可以使用箭头函数来定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">myFunction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数表达式还可以作为立即执行函数（Immediately Invoked Function Expression，<strong>IIFE</strong>）使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>需要注意的是，<strong>在使用函数表达式时</strong>，需要记住<strong>使用分号作为语句的结束符</strong>，以避免可能的错误。</p><h2 id="2-3-立即执行函数（IIEF"><a href="#2-3-立即执行函数（IIEF" class="headerlink" title="2.3 立即执行函数（IIEF)"></a>2.3 立即执行函数（IIEF)</h2><p>函数表达式创建以后立即执行，当函数变成立即执行表达式时，表达式中的变量不能从外部访问。IIFE主要用来隔离作用域，避免污染。</p><h3 id="2-3-1-常见格式"><a href="#2-3-1-常见格式" class="headerlink" title="2.3.1 常见格式"></a>2.3.1 常见格式</h3><p><strong>说明：</strong> 我们将函数简写为SH，即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>匿名函数前面加上一元操作符，后面加上():</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">-<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">+<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">~<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>简写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_">SH</span>();</span><br></pre></td></tr></table></figure><ol start="2"><li>匿名函数后面加上(),然后再用()将整个括起来：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>简写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="title function_">SH</span>());</span><br></pre></td></tr></table></figure><ol start="3"><li>先用 <code>()</code> 将匿名函数括起来，再在后面加上 <code>()</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>简写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable constant_">SH</span>)();</span><br></pre></td></tr></table></figure><ol start="4"><li>使用箭头函数表达式，先用()将箭头函数表达式括起来，再在后面加上():</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>简写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">S</span>=&gt;</span>H)();</span><br></pre></td></tr></table></figure><ol start="5"><li>匿名函数前面加上 <code>void</code> 关键字，后面加上 <code>()</code>， <code>void</code> 指定要计算或运行一个表达式，但是不返回值：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>有时候，还能看到立即执行函数前后分号的情况，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">;!<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I AM IIFE&quot;</span>)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>有效于前面的代码隔离，否则可能会出现意外的情况。</p><h3 id="2-3-2-参数传递"><a href="#2-3-2-参数传递" class="headerlink" title="2.3.2 参数传递"></a>2.3.2 参数传递</h3><p>将参数放在末尾即可实现参数传递：</p><p>eg1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;I AM IIFE&quot;</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">param</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(param)</span><br><span class="line">&#125;)(text);</span><br><span class="line"></span><br><span class="line"><span class="comment">// I AM IIFE</span></span><br></pre></td></tr></table></figure><p>eg2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dict = &#123;<span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;20&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dict.<span class="property">name</span>);</span><br><span class="line">&#125;)(dict);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bob</span></span><br></pre></td></tr></table></figure><p>eg3:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        sum += list[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">&#125;)(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h2 id="2-4-call-apply-bind"><a href="#2-4-call-apply-bind" class="headerlink" title="2.4 call() &#x2F; apply() &#x2F; bind()"></a>2.4 call() &#x2F; apply() &#x2F; bind()</h2><p>他们都是比较常用的方法，作用一模一样，即，<strong>改变函数中的this指向</strong>，区别：</p><ul><li>call() 方法会立即执行这个函数，接受一个或多个参数，参数之间用逗号隔开；</li><li>apply()方法会立即执行这个函数，接受一个包含多个参数的数组；</li><li>bind()方法<strong>不会</strong>立即执行这个函数，返回一个修改后的函数，便于稍后调用，接受的参数和call一样。</li></ul><h3 id="2-4-1-call"><a href="#2-4-1-call" class="headerlink" title="2.4.1 call()"></a>2.4.1 call()</h3><p><code>call()</code> 方法接受多个参数，第一个参数 thisArg 指定了函数体内 this 对象的指向，如果这个函数处于非严格模式下，指定为 null 或 undefined 时会自动替换为指向全局对象（浏览器中就是 window 对象），在严格模式下，函数体内的 this 还是为 null。从第二个参数开始往后，每个参数被依次传入函数，基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><p>eg1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>eg2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>&#125;</span><br><span class="line">test.<span class="title function_">call</span>(data)  <span class="comment">// John Doe</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-apply"><a href="#2-4-2-apply" class="headerlink" title="2.4.2 apply()"></a>2.4.2 apply()</h3><p><code>apply()</code> 方法接受两个参数，第一个参数 thisArg 与 <code>call()</code> 方法一致，第二个参数为一个带下标的集合，从 ECMAScript 第5版开始，这个集合可以为数组，也可以为类数组，<code>apply()</code> 方法把这个集合中的元素作为参数传递给被调用的函数，基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">apply</span>(thisArg, [arg1, arg2, ...])</span><br></pre></td></tr></table></figure><p>eg1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>eg2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>&#125;</span><br><span class="line">test.<span class="title function_">apply</span>(data)  <span class="comment">// John Doe</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-bind"><a href="#2-4-3-bind" class="headerlink" title="2.4.3 bind()"></a>2.4.3 bind()</h3><p><code>bind()</code> 方法和 <code>call()</code> 接受的参数是相同的，只不过 <code>bind()</code> <strong>返回的是一个函数</strong>，基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">bind</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><p>eg1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)()  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>eg2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>&#125;</span><br><span class="line">test.<span class="title function_">bind</span>(data)()  <span class="comment">// John Doe</span></span><br></pre></td></tr></table></figure><h2 id="2-5-重新认识webpack"><a href="#2-5-重新认识webpack" class="headerlink" title="2.5 重新认识webpack"></a>2.5 重新认识webpack</h2><p>我们重新看前面webpack中的函数的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span> (<span class="params">allModule</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">useModule</span>(<span class="params">whichModule</span>) &#123;</span><br><span class="line">        allModule[whichModule].<span class="title function_">call</span>(<span class="literal">null</span>, <span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">useModule</span>(<span class="number">0</span>)</span><br><span class="line">&#125;([</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">module0</span>(<span class="params">param</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;module0: &quot;</span> + param)&#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">module1</span>(<span class="params">param</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;module1: &quot;</span> + param)&#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">module2</span>(<span class="params">param</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;module2: &quot;</span> + param)&#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>整体是一个IIFE立即执行函数，传递一个数组，里面包含三个方法，视为三个模块，IIFE里面包含一个<code>useModule()</code>函数，将其视为<strong>模块加载器</strong>，即需要用哪个模块，即调用哪个，例中表示调用第一个模块，函数里面使用<code>call()</code>方法改变函数中的<code>this</code>指向并传递参数，调用相应的模块，并输出。</p><h2 id="2-6-动手做"><a href="#2-6-动手做" class="headerlink" title="2.6 动手做"></a>2.6 动手做</h2><p>下面是一段加密参数的webpack模块化写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&quot;crypto-js&quot;</span>)</span><br><span class="line"></span><br><span class="line">!<span class="keyword">function</span> (<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">acvs</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> kk = func[<span class="number">1</span>].<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">1e3</span>);</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            <span class="attr">r</span>: <span class="string">&quot;I LOVE PYTHON&quot;</span>,</span><br><span class="line">            <span class="attr">e</span>: kk,</span><br><span class="line">            <span class="attr">i</span>: <span class="string">&quot;62bs819idl00oac2&quot;</span>,</span><br><span class="line">            <span class="attr">k</span>: <span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> func[<span class="number">0</span>].<span class="title function_">call</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加密文本：&quot;</span> + <span class="title function_">acvs</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">odsc</span>(<span class="params">account</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cr = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> regExp = <span class="regexp">/(^\d&#123;7,8&#125;$)|(^0\d&#123;10,12&#125;$)/</span>;</span><br><span class="line">        <span class="keyword">if</span> (regExp.<span class="title function_">test</span>(account)) &#123;</span><br><span class="line">            cr = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mkle</span>(<span class="params">account</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cr = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> regExp = <span class="regexp">/^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/</span>;</span><br><span class="line">        <span class="keyword">if</span> (regExp.<span class="title function_">test</span>(account)) &#123;</span><br><span class="line">            cr = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;([</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="string">&quot;&quot;</span>, t = <span class="number">0</span>; t &lt; <span class="variable language_">this</span>.<span class="property">r</span>.<span class="property">length</span>; t++) &#123;</span><br><span class="line">            <span class="keyword">var</span> o = <span class="variable language_">this</span>.<span class="property">e</span> ^ <span class="variable language_">this</span>.<span class="property">r</span>.<span class="title function_">charCodeAt</span>(t);</span><br><span class="line">            n += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(o)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(n)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(x * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="title class_">CryptoJS</span>.<span class="title class_">MD5</span>(<span class="variable language_">this</span>.<span class="property">k</span>);</span><br><span class="line">        <span class="keyword">var</span> c = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(a);</span><br><span class="line">        <span class="keyword">var</span> d = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(e, c, &#123;</span><br><span class="line">            <span class="attr">iv</span>: <span class="variable language_">this</span>.<span class="property">i</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> d + <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="title class_">CryptoJS</span>.<span class="title class_">MD5</span>(<span class="variable language_">this</span>.<span class="property">k</span>);</span><br><span class="line">        <span class="keyword">var</span> d = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(b);</span><br><span class="line">        <span class="keyword">var</span> a = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(e, d, &#123;</span><br><span class="line">            <span class="attr">iv</span>: <span class="variable language_">this</span>.<span class="property">i</span></span><br><span class="line">        &#125;).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>有了前面的基础，直接将其中的函数传递进行，改写如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">r, e</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="string">&quot;&quot;</span>, t = <span class="number">0</span>; t &lt; r.<span class="property">length</span>; t++) &#123;</span><br><span class="line">        <span class="keyword">var</span> o = e ^ r.<span class="title function_">charCodeAt</span>(t);</span><br><span class="line">        n += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(o)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(x * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">acvs</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> kk = <span class="title function_">b</span>(<span class="number">1e3</span>);</span><br><span class="line">    <span class="keyword">var</span> r = <span class="string">&quot;I LOVE PYTHON&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">a</span>(r, kk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加密文本：&quot;</span> + <span class="title function_">acvs</span>())</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://juejin.cn/post/7021436180231094302#heading-9">爬虫逆向基础，理解 JavaScript 模块化编程 webpack - 掘金 (juejin.cn)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;p&gt;下面是一个常见的js函数：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="js逆向" scheme="http://hutalk.top/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js基础" scheme="http://hutalk.top/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js原型和原型链</title>
    <link href="http://hutalk.top/2023/09/13/js%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://hutalk.top/2023/09/13/js%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2023-09-13T08:05:44.000Z</published>
    <updated>2024-11-21T08:31:31.400Z</updated>
    
    <content type="html"><![CDATA[<p>js中复杂类型都是对象类型(Object）,而js中没有类(class)这个概念，那么其中的继承是如何实现的呢？<br>答案是<strong>构造函数</strong> </p><blockquote><p>ES6中的class可以看作只是一个语法糖，它的绝大部分的功能，ES5都可以做到，新的class写法只是让原型的写法更加的清晰、更像面向对象编程的语法而已。</p></blockquote><h1 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1. 前置知识"></a>1. 前置知识</h1><h2 id="我们需要理解以下知识：-函数也是一种对象-普通函数和构造函数的区别-搞清楚-proto-、prototype、constructor"><a href="#我们需要理解以下知识：-函数也是一种对象-普通函数和构造函数的区别-搞清楚-proto-、prototype、constructor" class="headerlink" title="我们需要理解以下知识：* 函数也是一种对象* 普通函数和构造函数的区别* 搞清楚 __proto__、prototype、constructor  "></a>我们需要理解以下知识：<br>* 函数也是一种对象<br>* 普通函数和构造函数的区别<br>* 搞清楚 __proto__、prototype、constructor  </h2><p>需要记住以下两点：</p><ul><li>__proto__、constructor属性是对象独有的</li><li>prototype属性是函数独有的</li></ul><p>前面说过函数也是对象的一种，所以，函数同样有__proto__、constructor,即：<br>函数有：__proto__、constructor、prototype<br>对象有：__proto__、constructor</p><h1 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2. 构造函数"></a>2. 构造函数</h1><p>构造函数和普通函数在JavaScript中有几个主要区别：</p><ol><li><p>创建对象：构造函数用于创建对象的实例，而普通函数用于执行特定的功能并返回一个值。</p></li><li><p>使用<code>new</code>关键字：在调用构造函数时，需要使用<code>new</code>关键字创建对象实例。这将触发以下操作：</p><ul><li>创建一个新的空对象</li><li>将构造函数的作用域绑定到新对象（使<code>this</code>引用该对象）</li><li>将新对象的原型指向构造函数的原型</li><li>返回新的对象实例</li></ul></li><li><p>对象属性和方法：构造函数经常用于在实例化过程中，给对象设置初始状态（例如属性和方法）。这些属性和方法在每个由构造函数创建的对象实例中都是独立的。普通函数一般不涉及对象的创建和状态管理，它可以执行一系列操作，但不会直接影响对象的属性和方法。</p></li><li><p>命名约定：通常，构造函数的命名习惯是首字母大写，以突出其作为构造函数的特殊功能和用途。</p></li></ol><p>下面是一个示例，展示了构造函数与普通函数的区别：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">greet</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象实例</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用普通函数</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>Person</code>是一个构造函数，用于创建<code>Person</code>对象的实例。它具有属性<code>name</code>和<code>age</code>，以及方法<code>greet</code>。通过使用<code>new</code>关键字调用构造函数，并传递适当的参数，我们可以创建一个<code>person</code>对象。</p><p>另一方面，<code>add</code>是一个普通函数，用于执行简单的加法操作。它接受两个参数并返回它们的和。这里没有涉及创建对象实例或设置对象状态，只是执行了一个计算操作并返回结果。</p><p>总结起来，构造函数用于创建对象的实例，而普通函数用于执行特定的功能。构造函数可以用于为对象设置属性和方法，而普通函数则更专注于执行某些操作并返回结果。</p><p><strong>小结：</strong> 构造函数通过new实例化，而普通函数没有这一过程，只是简单执行一段代码。</p><h1 id="3-prototype"><a href="#3-prototype" class="headerlink" title="3. prototype"></a>3. prototype</h1><p>在此之前，我们先看一段Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line"></span><br><span class="line">    school = <span class="string">&#x27;一中&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age</span>):</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">a = Person(<span class="number">19</span>)</span><br><span class="line">b = Person(<span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的学校为：&#x27;</span>, a.school)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b的学校为：&#x27;</span>, b.school)</span><br></pre></td></tr></table></figure><p>上面代码中a、b学校相同</p><p>那在js中不同实例如何共享属性和方法呢，没错就是prototype!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Parent</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">school</span> = <span class="string">&#x27;一中&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">school</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">school</span>)</span><br></pre></td></tr></table></figure><h1 id="4-proto-和原型链"><a href="#4-proto-和原型链" class="headerlink" title="4. __proto__ 和原型链"></a>4. __proto__ 和原型链</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span> === <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>__proto__ 指向该对象的原型对象，现已不推荐使用<br>推荐使用：<code>Object.getPrototypeOf(person)</code></p><p>每个通过构造函数创建出来的实例对象，其本身有个属性__proto__，这个属性会指向该实例对象的构造函数的原型对象。</p><p>当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会通过它的__proto__隐式属性，找到它的构造函数的原型对象，如果还没有找到就会再在其构造函数的prototype的__proto__中查找，这样一层一层向上查找就会形成一个链式结构，我们称为<strong>原型链</strong></p><h1 id="4-constructor"><a href="#4-constructor" class="headerlink" title="4. constructor"></a>4. constructor</h1><p>一句话：指向对象的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">constructor</span>) <span class="comment">// [Function: Parent]</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://juejin.cn/post/6984678359275929637#heading-2">https://juejin.cn/post/6984678359275929637#heading-2</a><br>[2] <a href="https://juejin.cn/post/7095651623812202533">https://juejin.cn/post/7095651623812202533</a><br>[3] <a href="https://juejin.cn/post/7021416739887906830#comment">https://juejin.cn/post/7021416739887906830#comment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;js中复杂类型都是对象类型(Object）,而js中没有类(class)这个概念，那么其中的继承是如何实现的呢？&lt;br&gt;答案是&lt;strong&gt;构造函数&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ES6中的class可以看作只是一个语法糖，它的绝大部分的功能</summary>
      
    
    
    
    <category term="js基础" scheme="http://hutalk.top/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="js基础" scheme="http://hutalk.top/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js类创建小结</title>
    <link href="http://hutalk.top/2023/09/13/js%E7%B1%BB%E5%88%9B%E5%BB%BA%E5%B0%8F%E7%BB%93/"/>
    <id>http://hutalk.top/2023/09/13/js%E7%B1%BB%E5%88%9B%E5%BB%BA%E5%B0%8F%E7%BB%93/</id>
    <published>2023-09-13T07:14:54.000Z</published>
    <updated>2024-11-21T08:31:31.400Z</updated>
    
    <content type="html"><![CDATA[<p>在JavaScript中，有几种方法可以创建类。下面是常见的几种方法：</p><ol><li><p>使用函数构造器（Constructor Function）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 构造函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加方法到原型上</span></span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 方法体</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建类的实例</span></span><br><span class="line"><span class="keyword">const</span> myObject = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br></pre></td></tr></table></figure></li><li><p>使用原型语法糖（Prototype Syntactic Sugar）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构造函数体</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加方法</span></span><br><span class="line">  <span class="title function_">myMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建类的实例</span></span><br><span class="line"><span class="keyword">const</span> myObject = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br></pre></td></tr></table></figure></li><li><p>使用对象字面量（Object Literal）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line">  <span class="title function_">myMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用工厂函数（Factory Function）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createMyObject</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> myObject = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加方法</span></span><br><span class="line">  myObject.<span class="property">myMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> myObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建类的实例</span></span><br><span class="line"><span class="keyword">const</span> myObject = <span class="title function_">createMyObject</span>();</span><br></pre></td></tr></table></figure></li><li><p>使用ES6的<code>class</code>关键字：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构造函数体</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">myMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建类的实例</span></span><br><span class="line"><span class="keyword">const</span> myObject = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br></pre></td></tr></table></figure></li></ol><p>无论选择哪种方法，都可以用来创建类，并添加属性和方法。其中，函数构造器和原型语法糖是传统的面向对象方式，而对象字面量和工厂函数则提供了更简洁的方式，而<code>class</code>关键字是ES6引入的语法糖，提供了更直观和面向对象的方式来声明类。</p><p>值得一提的是，使用<code>class</code>关键字声明的类是语法糖，实际上还是基于原型继承的。因此，不管选择哪种方法，最终还是会涉及到原型继承的概念。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在JavaScript中，有几种方法可以创建类。下面是常见的几种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用函数构造器（Constructor Function）：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="js基础" scheme="http://hutalk.top/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="js基础" scheme="http://hutalk.top/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js函数声明方法</title>
    <link href="http://hutalk.top/2023/09/13/js%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>http://hutalk.top/2023/09/13/js%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</id>
    <published>2023-09-13T07:12:44.000Z</published>
    <updated>2024-11-21T08:31:31.400Z</updated>
    
    <content type="html"><![CDATA[<p>在JavaScript中，有几种不同的方法可以定义函数。以下是常见的几种方法：</p><ol><li><p>函数声明（Function Declaration）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数表达式（Function Expression）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunction = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>箭头函数（Arrow Function）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myFunction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Function构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunction = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;return x + y&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><p>上述这些方法在定义函数时有一些差异和用途上的区别。</p><p>函数声明是最常见也最简单的方式，使用关键字<code>function</code>直接定义一个函数。函数声明会被提升到作用域的顶部，因此在函数声明之前调用函数也是可以的。</p><p>函数表达式则是将函数赋值给一个变量，通过匿名或具名函数来创建。函数表达式的函数只能在定义之后才能调用，因为它们是根据赋值语句进行变量提升的。</p><p>箭头函数是ES6引入的新语法，它提供了更简洁的函数定义方式，并且具有更简短的语法、绑定自己的<code>this</code>，以及隐式返回值的特性。</p><p>Function构造函数是一种较少使用的方式，它通过提供一个字符串形式的参数来创建函数。这种方式不太常用，但在某些特定情况下，可以用于动态创建函数。</p><p>需要根据具体的场景和需求选择适合的方法来定义函数。函数声明和函数表达式是最常用的方式，而箭头函数则在简短的函数或需要绑定上下文时更加方便。Function构造函数则是一种特殊情况下的选择。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在JavaScript中，有几种不同的方法可以定义函数。以下是常见的几种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数声明（Function Declaration）：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="js基础" scheme="http://hutalk.top/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="js基础" scheme="http://hutalk.top/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向之hook</title>
    <link href="http://hutalk.top/2023/09/12/JS%E9%80%86%E5%90%91%E4%B9%8Bhook/"/>
    <id>http://hutalk.top/2023/09/12/JS%E9%80%86%E5%90%91%E4%B9%8Bhook/</id>
    <published>2023-09-12T08:30:29.000Z</published>
    <updated>2024-11-21T08:31:31.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h1><p>通过 hook 技术，可以改变函数的行为、捕获函数的调用或修改对象的属性。一般使用<code>Object.defineProperty()</code>来进行hook。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><ul><li>obj：对象；</li><li>prop：对象的属性名；</li><li>descriptor：属性描述符；</li></ul><p><code>Object.defineProperty()</code> 允许精确地添加或修改对象上的属性。</p><p>对象中存在的<strong>属性描述符</strong>有两种主要类型：数据描述符和访问器描述符。<strong>数据描述符</strong>是一个具有可写或不可写值的属性。<strong>访问器描述符</strong>是由 getter&#x2F;setter 函数对描述的属性。描述符只能是这两种类型之一，不能同时为两者。</p><p><strong>数据描述符</strong>具有以下可选键值：</p><ul><li>value</li><li>writable</li></ul><p><strong>访问器描述符</strong>具有以下可选键值：</p><ul><li>get</li><li>set</li></ul><hr><p> 我们一般hook使用的是get和set方法，下边简单演示一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(people, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取值！&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;设置值！&#x27;</span>);</span><br><span class="line">        count = val + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">people.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people.<span class="property">age</span>); </span><br></pre></td></tr></table></figure><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20230912171138146.png" alt="image-20230912171138146"></p><p>通过这样的方法，我们就可以在设置某个值的时候，添加一些代码，比如 debugger;，让其断下，然后利用调用栈进行调试，找到参数加密、或者参数生成的地方，需要注意的是，网站加载时首先要运行我们的 Hook 代码，再运行网站自己的代码，才能够成功断下，这个过程我们可以称之为 Hook 代码的注入。</p><h1 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h1><h2 id="1-fiddler-插件"><a href="#1-fiddler-插件" class="headerlink" title="1. fiddler 插件"></a>1. fiddler 插件</h2><p>编程猫<a href="https://download.csdn.net/download/weixin_39190382/88123061">https://download.csdn.net/download/weixin_39190382/88123061</a></p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20230912172159061.png" alt="image-20230912172159061"></p><h2 id="2-TamperMonkey"><a href="#2-TamperMonkey" class="headerlink" title="2. TamperMonkey"></a>2. <strong>TamperMonkey</strong></h2><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/pqq74.png" alt="img"></p><h1 id="3-常见hook代码"><a href="#3-常见hook代码" class="headerlink" title="3. 常见hook代码"></a>3. 常见hook代码</h1><h2 id="1-hook-cookie"><a href="#1-hook-cookie" class="headerlink" title="1. hook cookie"></a>1. hook cookie</h2><p>Cookie Hook 用于定位 Cookie 中关键参数生成位置，以下代码演示了当 Cookie 中匹配到了 __dfp 关键字， 则插入断点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">  var cookieTemp = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  Object.defineProperty(document, <span class="string">&#x27;cookie&#x27;</span>, &#123;</span><br><span class="line">    <span class="built_in">set</span>: function (val) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val.indexOf(<span class="string">&#x27;__dfp&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        debugger;</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(<span class="string">&#x27;Hook捕获到cookie设置-&gt;&#x27;</span>, val);</span><br><span class="line">      cookieTemp = val;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> cookieTemp;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="2-hook-header"><a href="#2-hook-header" class="headerlink" title="2. hook header"></a>2. hook header</h2><p>hook header 中的Authorization，下断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    var org = window.XMLHttpRequest.prototype.setRequestHeader;</span><br><span class="line">    window.XMLHttpRequest.prototype.setRequestHeader = function (key, value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="string">&#x27;Authorization&#x27;</span>) &#123;</span><br><span class="line">            debugger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> org.apply(this, arguments);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="3-hook-url"><a href="#3-hook-url" class="headerlink" title="3. hook url"></a>3. hook url</h2><p>URL Hook 用于定位请求 URL 中关键参数生成位置，以下代码演示了当请求的 URL 里包含 login 关键字时，则插入断点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    var <span class="built_in">open</span> = window.XMLHttpRequest.prototype.<span class="built_in">open</span>;</span><br><span class="line">    window.XMLHttpRequest.prototype.<span class="built_in">open</span> = function (method, url, <span class="keyword">async</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url.indexOf(<span class="string">&quot;login&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            debugger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>.apply(this, arguments);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="4-hook-JSON-stringify"><a href="#4-hook-JSON-stringify" class="headerlink" title="4. hook JSON.stringify"></a>4. hook JSON.stringify</h2><p>JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串，在某些站点的加密过程中可能会遇到，以下代码演示了遇到 JSON.stringify() 时，则插入断点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    var stringify = JSON.stringify;</span><br><span class="line">    JSON.stringify = function(params) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;Hook JSON.stringify ——&gt; &quot;</span>, params);</span><br><span class="line">        debugger;</span><br><span class="line">        <span class="keyword">return</span> stringify(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="5-hook-JSON-parse"><a href="#5-hook-JSON-parse" class="headerlink" title="5. hook JSON.parse()"></a>5. hook JSON.parse()</h2><p>JSON.parse() 方法用于将一个 JSON 字符串转换为对象，在某些站点的加密过程中可能会遇到，以下代码演示了遇到 JSON.parse() 时，则插入断点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    var parse = JSON.parse;</span><br><span class="line">    JSON.parse = function(params) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;Hook JSON.parse ——&gt; &quot;</span>, params);</span><br><span class="line">        debugger;</span><br><span class="line">        <span class="keyword">return</span> parse(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="6-hook-eval"><a href="#6-hook-eval" class="headerlink" title="6. hook eval"></a>6. hook eval</h2><p>JavaScript eval() 函数的作用是计算 JavaScript 字符串，并把它作为脚本代码来执行。如果参数是一个表达式，eval() 函数将执行表达式。如果参数是 Javascript 语句，eval() 将执行 Javascript 语句，经常被用来动态执行 JS。以下代码执行后，之后所有的 eval() 操作都会在控制台打印输出将要执行的 JS 源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    // 保存原始方法</span><br><span class="line">    window.__cr_eval = window.<span class="built_in">eval</span>;</span><br><span class="line">    // 重写 <span class="built_in">eval</span></span><br><span class="line">    var myeval = function(src) &#123;</span><br><span class="line">        console.log(src);</span><br><span class="line">        console.log(<span class="string">&quot;=============== eval end ===============&quot;</span>);</span><br><span class="line">        debugger;</span><br><span class="line">        <span class="keyword">return</span> window.__cr_eval(src);</span><br><span class="line">    &#125;</span><br><span class="line">    // 屏蔽 JS 中对原生函数 native 属性的检测</span><br><span class="line">    var _myeval = myeval.bind(null);</span><br><span class="line">    _myeval.toString = window.__cr_eval.toString;</span><br><span class="line">    Object.defineProperty(window, <span class="string">&#x27;eval&#x27;</span>, &#123;</span><br><span class="line">        value: _myeval</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="7-hook-Function"><a href="#7-hook-Function" class="headerlink" title="7. hook Function"></a>7. hook Function</h2><p>以下代码执行后，所有的函数操作都会在控制台打印输出将要执行的 JS 源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    // 保存原始方法</span><br><span class="line">    window.__cr_fun = window.Function;</span><br><span class="line">    // 重写 function</span><br><span class="line">    var myfun = function() &#123;</span><br><span class="line">        var args = Array.prototype.<span class="built_in">slice</span>.call(arguments, <span class="number">0</span>, -<span class="number">1</span>).join(<span class="string">&quot;,&quot;</span>),</span><br><span class="line">            src = arguments[arguments.length - <span class="number">1</span>];</span><br><span class="line">        console.log(src);</span><br><span class="line">        console.log(<span class="string">&quot;=============== Function end ===============&quot;</span>);</span><br><span class="line">        debugger;</span><br><span class="line">        <span class="keyword">return</span> window.__cr_fun.apply(this, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    // 屏蔽js中对原生函数native属性的检测</span><br><span class="line">    myfun.toString = function() &#123;</span><br><span class="line">        <span class="keyword">return</span> window.__cr_fun + <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    Object.defineProperty(window, <span class="string">&#x27;Function&#x27;</span>, &#123;</span><br><span class="line">        value: myfun</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="4-请求"><a href="#4-请求" class="headerlink" title="4. 请求"></a>4. 请求</h1><h2 id="1-请求分类"><a href="#1-请求分类" class="headerlink" title="1. 请求分类"></a>1. 请求分类</h2><p>在 JavaScript 中，可以使用多种方式发送 HTTP 请求，如下所示：</p><ol><li><p>XMLHttpRequest（XHR）对象：XHR 是原生 JavaScript 提供的一种发送 HTTP 请求的方式，它允许您异步获取来自服务器的数据，并更新页面内容。通过创建 XHR 对象并调用其方法（如 <code>open()</code> 和 <code>send()</code>），您可以轻松地发送 GET、POST、PUT、DELETE 等类型的 HTTP 请求。</p></li><li><p>Fetch API：Fetch API 是一种新的 Web API，它提供了一种更简洁且易于使用的方式来发送 HTTP 请求和处理响应。与 XHR 不同的是，Fetch API 返回一个 Promise 对象，从而使异步请求更加容易管理和处理。</p></li><li><p>jQuery AJAX：jQuery AJAX 是一种使用 jQuery 库发送 HTTP 请求的方式。它通过向 <code>$ajax()</code> 函数传递参数（如 URL、数据、请求类型等）来发送请求，并使用回调函数来处理响应。</p></li><li><p>Axios： Axios 是一个第三方库，它提供了一种基于 Promise 的方式来发送 HTTP 请求。Axios 提供了易于使用的 API，使得发送 GET、POST、PUT 等类型的请求变得非常简单。</p></li><li><p>使用浏览器内置的 <code>fetch()</code> 方法：与 Fetch API 类似，所有主流浏览器都提供了一个内置的 <code>fetch()</code> 方法，它也返回一个 Promise 对象，允许您轻松地发送 HTTP 请求和处理响应。</p></li></ol><h2 id="2-hook-请求"><a href="#2-hook-请求" class="headerlink" title="2. hook 请求"></a>2. hook 请求</h2><p><strong>说明：</strong> 参照3.3进行修改</p><ol><li>XHR（XMLHttpRequest）钩子：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalOpen = <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span>;</span><br><span class="line"><span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span>(<span class="params">method, url</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求前的逻辑</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拦截到请求：&#x27;</span>, method, url);</span><br><span class="line">  <span class="comment">// 修改请求头</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Authorization&#x27;</span>, <span class="string">&#x27;Bearer TOKEN&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  originalOpen.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Fetch API 钩子：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalFetch = <span class="variable language_">window</span>.<span class="property">fetch</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">fetch</span> = <span class="keyword">function</span>(<span class="params">url, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求前的逻辑</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拦截到请求：&#x27;</span>, url, options);</span><br><span class="line">  <span class="comment">// 修改请求参数</span></span><br><span class="line">  options.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">&#x27;Bearer TOKEN&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">originalFetch</span>(url, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>jQuery AJAX 钩子：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajaxSetup</span>(&#123;</span><br><span class="line">  <span class="attr">beforeSend</span>: <span class="keyword">function</span>(<span class="params">xhr, settings</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求前的逻辑</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拦截到请求：&#x27;</span>, settings.<span class="property">url</span>, settings.<span class="property">type</span>);</span><br><span class="line">    <span class="comment">// 修改请求头</span></span><br><span class="line">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Authorization&#x27;</span>, <span class="string">&#x27;Bearer TOKEN&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>Axios 钩子：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求前的逻辑</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拦截到请求：&#x27;</span>, config.<span class="property">url</span>, config.<span class="property">method</span>);</span><br><span class="line">  <span class="comment">// 修改请求头</span></span><br><span class="line">  config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">&#x27;Bearer TOKEN&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>浏览器内置的 <code>fetch()</code> 方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalFetch = <span class="variable language_">window</span>.<span class="property">fetch</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">fetch</span> = <span class="keyword">function</span>(<span class="params">url, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求前的逻辑</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拦截到请求：&#x27;</span>, url, options);</span><br><span class="line">  <span class="comment">// 修改请求参数</span></span><br><span class="line">  <span class="keyword">if</span> (!options.<span class="property">headers</span>) &#123;</span><br><span class="line">    options.<span class="property">headers</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  options.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">&#x27;Bearer TOKEN&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">originalFetch</span>(url, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1. 概念&quot;&gt;&lt;/a&gt;1. 概念&lt;/h1&gt;&lt;p&gt;通过 hook 技术，可以改变函数的行为、捕获函数的调用或修改对象的属性。一般使用&lt;code&gt;Object.define</summary>
      
    
    
    
    <category term="js逆向" scheme="http://hutalk.top/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向" scheme="http://hutalk.top/tags/js%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>js补环境之proxy</title>
    <link href="http://hutalk.top/2023/08/29/js%E8%A1%A5%E7%8E%AF%E5%A2%83%E4%B9%8Bproxy/"/>
    <id>http://hutalk.top/2023/08/29/js%E8%A1%A5%E7%8E%AF%E5%A2%83%E4%B9%8Bproxy/</id>
    <published>2023-08-29T14:11:58.000Z</published>
    <updated>2024-11-21T08:38:04.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-补环境是什么"><a href="#1-补环境是什么" class="headerlink" title="1. 补环境是什么"></a>1. 补环境是什么</h1><p><strong>浏览器环境</strong>： 是指 JS代码在浏览器中的运行时环境，它包括V8自动构建的对象（即ECMAScript的内容,如Date、Array），浏览器（内置）传递给V8的操作DOM和BOM的对象（如document、navigator）；</p><p><strong>Node环境</strong>：是基于V8引擎的Js运行时环境，它包括V8与其自己的内置API，如fs，http，path；</p><p><strong>Node环境</strong> 与 <strong>浏览器环境</strong> 的异同点可以简单概括如图：</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20230830065856051.png" alt="image-20230830065856051"></p><p>简而言之，就是补浏览器有而Node没有的环境，即BOM和DOM的对象。</p><h1 id="2-为什么要补环境"><a href="#2-为什么要补环境" class="headerlink" title="2. 为什么要补环境"></a>2. 为什么要补环境</h1><p>由于浏览器和Node的差异，导致部分JS代码在浏览器中能正常运行，但在Node无法正常运行。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="variable language_">document</span>?<span class="attr">true</span>:<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;正确加密&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;错误加密&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在浏览器环境运行时 flag为<span class="literal">true</span>，然后得到正常结果；</span><br><span class="line">在<span class="title class_">Node</span>环境运行时 flag为<span class="literal">false</span>，然后得到错误结果；</span><br></pre></td></tr></table></figure><p>所以，我们需要补浏览器的环境，是扣出的js能在node的环境中正常运行。</p><p>一般补浏览器BOM和DOM里面的：window,document,history,location,navigator,screen,setTime,setInterval等。</p><p>对于反爬弱的网站，一般只需要补第一层，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="variable language_">this</span>;</span><br><span class="line"><span class="keyword">var</span> navigator = <span class="title function_">funciton</span>(<span class="params"></span>)&#123;&#125;;</span><br></pre></td></tr></table></figure><p>对于风控严格的网站，不仅要补最外一层，还要补里面的属性对象，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Document</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Document</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">createElement</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="string">&quot;div&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">onwheel</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="string">&quot;canvas&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;getContext : <span class="keyword">function</span>(<span class="params">_x</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(_x == <span class="string">&quot;webg21&quot;</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里补了document对象里面的creatElement，以及其中的方法onwheel和getContext，相当于补了三层环境。</p><h1 id="3-如何补环境"><a href="#3-如何补环境" class="headerlink" title="3. 如何补环境"></a>3. 如何补环境</h1><h2 id="3-1-基础"><a href="#3-1-基础" class="headerlink" title="3.1 基础"></a>3.1 基础</h2><p>首先，通过分析js代码，找到加密函数所需要的代码，然后复制到本地js文件，</p><p>然后把js代码放到js调试工具运行（如vscode)，运行后提示缺啥补啥。</p><h2 id="3-2-proxy"><a href="#3-2-proxy" class="headerlink" title="3.2 proxy"></a>3.2 proxy</h2><p>对于简单网站，vscode够用，对于略微复杂一点的就不太行了。</p><p><strong>proxy补环境优点：</strong></p><ol><li>vscode缺点是一次运行一个，若缺少的东西多，一个一个补会非常麻烦，而proxy会一次打印缺少的东西，方便很多。</li><li>对于一些检测点，vscode无法识别，proxy可以发现检测点</li><li>开发js逆向补环境框架需要，每个网站的反爬手段是不一样的，在这种情况下，写一个通用的框架是最好的选择，必须要用proxy</li></ol><p>proxy:</p><blockquote><p>Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像<a href="https://so.csdn.net/so/search?q=%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F&spm=1001.2101.3001.7020">代理模式</a>，对对象的代理对象进行操作，同时，可以添加一些需要的额外操作。</p></blockquote><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target,handler)</span><br></pre></td></tr></table></figure><ul><li>target: 被代理的对象</li><li>handller: 是一个对象用来处理target的行为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;<span class="attr">url</span>:<span class="string">&#x27;pychong.com&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;你做了调用操作&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">a</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-补环境是什么&quot;&gt;&lt;a href=&quot;#1-补环境是什么&quot; class=&quot;headerlink&quot; title=&quot;1. 补环境是什么&quot;&gt;&lt;/a&gt;1. 补环境是什么&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;浏览器环境&lt;/strong&gt;： 是指 JS代码在浏览器中的运行时环境，它</summary>
      
    
    
    
    <category term="js逆向" scheme="http://hutalk.top/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="js逆向 补环境" scheme="http://hutalk.top/tags/js%E9%80%86%E5%90%91-%E8%A1%A5%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>typora 设置腾讯云图床配置文件</title>
    <link href="http://hutalk.top/2023/08/08/typora-%E8%AE%BE%E7%BD%AE%E8%85%BE%E8%AE%AF%E4%BA%91%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://hutalk.top/2023/08/08/typora-%E8%AE%BE%E7%BD%AE%E8%85%BE%E8%AE%AF%E4%BA%91%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2023-08-08T04:15:08.000Z</published>
    <updated>2024-11-21T08:31:31.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>ubuntu 中 配置typora腾讯云图床，关于配置文件的设置</p><h1 id="1-正文"><a href="#1-正文" class="headerlink" title="1. 正文"></a>1. 正文</h1><p>按照如下图所示，选择PicGo-Core，下载更新，</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20230808122039169.png" alt="image-20230808122039169"></p><p>可以点击‘打开配置文件’，也可使用命令<code>vim ~/.picgo/config.json</code> 粘贴如下内容，替换其中的appID,bucket,secretId,secretKey,area，可在腾讯云的对象存储中找到，token可登录<a href="https://sm.ms/home/apitoken%E7%BD%91%E7%AB%99%EF%BC%8C%E6%B3%A8%E5%86%8C%E5%90%8E%E5%9C%A8%E9%93%BE%E6%8E%A5%E4%BD%8D%E7%BD%AE%E6%89%BE%E5%88%B0">https://sm.ms/home/apitoken网站，注册后在链接位置找到</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;picBed&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;current&quot;</span>: <span class="string">&quot;tcyun&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uploader&quot;</span>: <span class="string">&quot;tcyun&quot;</span>,</span><br><span class="line">    <span class="string">&quot;smms&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;tcyun&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;appId&quot;</span>: <span class="string">&quot;*******&quot;</span>,</span><br><span class="line">      <span class="string">&quot;area&quot;</span>: <span class="string">&quot;ap-nanjing&quot;</span>,</span><br><span class="line">      <span class="string">&quot;bucket&quot;</span>: <span class="string">&quot;*****&quot;</span>,</span><br><span class="line">      <span class="string">&quot;customUrl&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;typora/&quot;</span>,</span><br><span class="line">      <span class="string">&quot;secretId&quot;</span>: <span class="string">&quot;AKIDzkF*******fEAsUrH1g5&quot;</span>,</span><br><span class="line">      <span class="string">&quot;secretKey&quot;</span>: <span class="string">&quot;KbccMtA*******fz3zB8pFm37v&quot;</span>,</span><br><span class="line">      <span class="string">&quot;version&quot;</span>: <span class="string">&quot;v5&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;picgoPlugins&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后‘验证图片上传选项’，查看是否成功。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://sm.ms/home/apitoken">https://sm.ms/home/apitoken</a></p><p>[2] <a href="https://www.cnblogs.com/suguangti/p/14702744.html">https://www.cnblogs.com/suguangti/p/14702744.html</a></p><p>[3] <a href="https://blog.csdn.net/NicolasLearner/article/details/117825767#t4">https://blog.csdn.net/NicolasLearner/article/details/117825767#t4</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h1&gt;&lt;p&gt;ubuntu 中 配置typora腾讯云图床，关于配置文件的设置&lt;/p&gt;
&lt;h1 id=&quot;1-正文&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="typora" scheme="http://hutalk.top/categories/typora/"/>
    
    
    <category term="typora" scheme="http://hutalk.top/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>hexo 多台电脑公共维护博客</title>
    <link href="http://hutalk.top/2023/08/07/hexo-%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%85%B1%E5%90%8C%E7%BB%B4%E6%8A%A4%E5%8D%9A%E5%AE%A2/"/>
    <id>http://hutalk.top/2023/08/07/hexo-%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%85%B1%E5%90%8C%E7%BB%B4%E6%8A%A4%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-08-07T07:19:01.000Z</published>
    <updated>2024-11-21T09:33:59.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>在不同电脑之间共同维护博客</p><p><strong>前提：</strong> 电脑上以安装并登录github</p><h1 id="1-正文"><a href="#1-正文" class="headerlink" title="1. 正文"></a>1. 正文</h1><h2 id="1-1-基础知识"><a href="#1-1-基础知识" class="headerlink" title="1.1 基础知识"></a>1.1 基础知识</h2><p>hexo我们可以简单理解为将<strong>md格式</strong>的文件转换成<strong>html类的网页文件</strong>。当我们使用<code>hexo d</code> 时，只会把生成html类的网页推送到远程服务器。</p><p>如果我们想在不同电脑上都能维护博客，就需要把生成html类的代码也放远端(github)，这样就能共同维护了。</p><hr><p>hexo部分文件夹说明：</p><table><thead><tr><th align="center">文件夹</th><th align="center">说明</th><th></th></tr></thead><tbody><tr><td align="center">public</td><td align="center">hexo g生成的网页代码</td><td></td></tr><tr><td align="center">thems</td><td align="center">主题</td><td></td></tr><tr><td align="center">_config.yml</td><td align="center">全局配置文件</td><td></td></tr><tr><td align="center">source</td><td align="center">md文件</td><td></td></tr><tr><td align="center">package-lock.json</td><td align="center">锁定包的版本</td><td></td></tr><tr><td align="center">package.json</td><td align="center">hexo相关包的信息</td><td></td></tr><tr><td align="center">scaffolds</td><td align="center">文章模版</td><td></td></tr></tbody></table><p>常用命令说明：</p><ul><li>hexo clean: 清除public中的数据</li><li>hexo g: 将md格式文件转换成html类静态网页文件</li><li>hexo d: 推送到远端部署</li><li>hexo s: 本地预览</li><li>hexo n: 新建文件</li></ul><p>推送文章三部曲：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="1-2-实现"><a href="#1-2-实现" class="headerlink" title="1.2 实现"></a>1.2 实现</h2><p>将hexo工具包推送到我们的私人仓库即可。不建议将文件推送到github pages 的<strong>不同分支</strong>，</p><p>一来小白容易理不清，二来public中保存了我们的原始md文件，可能包含草稿（_drafts）文件。</p><h3 id="1-2-1-初始化仓库"><a href="#1-2-1-初始化仓库" class="headerlink" title="1.2.1 初始化仓库"></a>1.2.1 初始化仓库</h3><p>在我们的工作目录下<code>git init</code> 初始化仓库，</p><p>再将不需要推送的文件填写在.gitignore中，我们 <code>git status</code> 查看以下，将会推送如下代码：</p><p><img src="https://typora-blog-image-1311260816.cos.ap-nanjing.myqcloud.com/typora/image-20230808120404051.png" alt="image-20230808120404051"></p><h3 id="1-2-2-创建私人仓库"><a href="#1-2-2-创建私人仓库" class="headerlink" title="1.2.2 创建私人仓库"></a>1.2.2 创建私人仓库</h3><p>再github中创建私人仓库</p><h3 id="1-2-3-推送到仓库"><a href="#1-2-3-推送到仓库" class="headerlink" title="1.2.3 推送到仓库"></a>1.2.3 推送到仓库</h3><p>需要将thems中的各主题以子模块的形式重新加入，否则需要删除主题内.git文件，如next文件中的.git文件。如果我们不以子模块加入的话，那么thems主题里面的内容都会推送到github仓库，<strong>可以但是没有必要。</strong></p><p>这里我们以子模块加入：</p><ol><li>首先删除thems里面的主题，如果你的主题做过修改的话，那么就将主题推送到一个自己的仓库以后再删除。</li><li>清除索引<code>git rm --cached themes/next</code></li><li>子模块加入：<code>git submodule add https://github.com/next-theme/hexo-theme-next themes/next/</code></li></ol><p>这样当我们推送我们的我们Hexo工具时，里面的主题是不会被推送上去了，省时省力。</p><p>推送：<code>git push -u origin main</code></p><h3 id="1-2-4-另一台电脑的使用"><a href="#1-2-4-另一台电脑的使用" class="headerlink" title="1.2.4 另一台电脑的使用"></a>1.2.4 另一台电脑的使用</h3><p>当我们换了一台电脑，只需要把这个工具包clone下来，并安装nodejs等相关代码即可。</p><p>当我们clone完以后，会发现thems里面有主题的名字的文件夹，但是里面没有内容。这个时候我们只需要把里面的下载下来即可。</p><h4 id="A-下载工具代码"><a href="#A-下载工具代码" class="headerlink" title="A. 下载工具代码"></a>A. 下载工具代码</h4><p><strong>法一：</strong> clone以后下载子模块</p><p>先clone下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span>  https://github.com/onceone/hexotools.git</span><br><span class="line"><span class="built_in">cd</span> hexotools</span><br></pre></td></tr></table></figure><p>在拉取子模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><p><strong>法二：</strong> clone时自动下载子模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/onceone/hexotools.git</span><br></pre></td></tr></table></figure><h4 id="B-安装必要库"><a href="#B-安装必要库" class="headerlink" title="B. 安装必要库"></a>B. 安装必要库</h4><p>在我们的工具代码中，会package.json中记录的相关库进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="C-写"><a href="#C-写" class="headerlink" title="C. 写"></a>C. 写</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n</span><br></pre></td></tr></table></figure><h4 id="D-发布"><a href="#D-发布" class="headerlink" title="D. 发布"></a>D. 发布</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   <span class="comment"># 清除缓存文件等</span></span><br><span class="line">hexo g       <span class="comment"># 生成页面</span></span><br><span class="line">hexo s       <span class="comment"># 启动预览</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://www.jianshu.com/p/0b1fccce74e0/">https://www.jianshu.com/p/0b1fccce74e0/</a></p><p>[2] <a href="https://blog.csdn.net/K1052176873/article/details/122879462">https://blog.csdn.net/K1052176873/article/details/122879462</a></p><p>[3] <a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a></p><p>[4] <a href="https://zhuanlan.zhihu.com/p/552639819">https://zhuanlan.zhihu.com/p/552639819</a></p><p>[5] <a href="https://zhuanlan.zhihu.com/p/305812430">https://zhuanlan.zhihu.com/p/305812430</a></p><p>[6] <a href="https://blog.csdn.net/weixin_45019350/article/details/121901433#t13">https://blog.csdn.net/weixin_45019350/article/details/121901433#t13</a></p><p>[7] <a href="https://blog.csdn.net/jj6666djdbbd/article/details/129321783">https://blog.csdn.net/jj6666djdbbd/article/details/129321783</a></p><p>[8] <a href="https://blog.csdn.net/wtyuong/article/details/124892742">https://blog.csdn.net/wtyuong/article/details/124892742</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h1&gt;&lt;p&gt;在不同电脑之间共同维护博客&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前提：&lt;/strong&gt; 电脑上以安装并登录github&lt;/p</summary>
      
    
    
    
    <category term="hexo" scheme="http://hutalk.top/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://hutalk.top/tags/hexo/"/>
    
  </entry>
  
</feed>
