<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡侃有料的博客</title>
  
  
  <link href="http://hutalk.top/atom.xml" rel="self"/>
  
  <link href="http://hutalk.top/"/>
  <updated>2024-11-22T07:28:42.196Z</updated>
  <id>http://hutalk.top/</id>
  
  <author>
    <name>胡侃有料</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【c++|opencv】三、频率域滤波---7.巴特沃斯高通滤波 - C++ - opencv</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-7-%E5%B7%B4%E7%89%B9%E6%B2%83%E6%96%AF%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-7-%E5%B7%B4%E7%89%B9%E6%B2%83%E6%96%AF%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-22T07:26:11.000Z</published>
    <updated>2024-11-22T07:28:42.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-巴特沃斯高通滤波"><a href="#1-巴特沃斯高通滤波" class="headerlink" title="1. 巴特沃斯高通滤波"></a>1. 巴特沃斯高通滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mydft.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,img_out,img_transform;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;could not load image...&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 傅里叶变换</span></span><br><span class="line">    <span class="built_in">mydft</span>(img_gray,img_out,img_transform);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_out&quot;</span>,img_out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 巴特沃斯高通滤波</span></span><br><span class="line">    Mat planes[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">split</span>(img_transform,planes); <span class="comment">// 分离通道，获取实部和虚部</span></span><br><span class="line">    Mat img_transform_real = planes[<span class="number">0</span>];</span><br><span class="line">    Mat img_transform_imag = planes[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> core_x = img_transform_real.rows/<span class="number">2</span>; </span><br><span class="line">    <span class="type">int</span> core_y = img_transform_real.cols/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">20</span>;</span><br><span class="line">    <span class="type">float</span> h;</span><br><span class="line">    <span class="type">float</span> n =<span class="number">2</span>;</span><br><span class="line">    <span class="type">float</span> D;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;img_transform_real.rows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;img_transform_real.cols;j++)&#123;</span><br><span class="line">            D = (i-core_x)*(i-core_x) + (j-core_y)*(j-core_y);</span><br><span class="line">            h = <span class="number">1</span>/(<span class="number">1</span>+<span class="built_in">pow</span>( ((r*r)/D),n));</span><br><span class="line">            img_transform_real.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j) *= h;</span><br><span class="line">            img_transform_imag.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j) *= h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    planes[<span class="number">0</span>] = img_transform_real;</span><br><span class="line">    planes[<span class="number">1</span>] = img_transform_imag;</span><br><span class="line">    Mat img_transform_ilpf;</span><br><span class="line">    <span class="built_in">merge</span>(planes,<span class="number">2</span>,img_transform_ilpf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 傅里叶逆变换</span></span><br><span class="line">    Mat iDft[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">idft</span>(img_transform_ilpf,img_transform_ilpf); <span class="comment">// 傅里叶逆变换</span></span><br><span class="line">    <span class="built_in">split</span>(img_transform_ilpf,iDft); <span class="comment">// 分离通道，主要获0通道</span></span><br><span class="line">    <span class="built_in">magnitude</span>(iDft[<span class="number">0</span>],iDft[<span class="number">1</span>],iDft[<span class="number">0</span>]); <span class="comment">// 计算复数的幅值，保存在iDft[0]</span></span><br><span class="line">    <span class="built_in">normalize</span>(iDft[<span class="number">0</span>],iDft[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>,NORM_MINMAX); <span class="comment">// 归一化处理</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_out_ilpf&quot;</span>,iDft[<span class="number">0</span>]); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-巴特沃斯高通滤波&quot;&gt;&lt;a href=&quot;#1-巴特沃斯高通滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 巴特沃斯高通滤波&quot;&gt;&lt;/a&gt;1. 巴特沃斯高通滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
  </entry>
  
  <entry>
    <title>【c++|opencv】三、频率域滤波---6.高斯高通滤波 - C++ - opencv</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-6-%E9%AB%98%E6%96%AF%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-6-%E9%AB%98%E6%96%AF%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-22T07:25:45.000Z</published>
    <updated>2024-11-22T07:28:38.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-高斯高通滤波"><a href="#1-高斯高通滤波" class="headerlink" title="1. 高斯高通滤波"></a>1. 高斯高通滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mydft.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,img_out,img_transform;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;can not load image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Img_gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 傅里叶变换，img_out频谱图，img_transform为傅里叶变换的复数</span></span><br><span class="line">    <span class="built_in">mydft</span>(img_gray,img_out,img_transform);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Img_out&quot;</span>,img_out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 高斯高通滤波</span></span><br><span class="line">    Mat planes[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">split</span>(img_transform,planes); <span class="comment">// 分离通道，获取实部和虚部</span></span><br><span class="line">    Mat img_transform_real = planes[<span class="number">0</span>];</span><br><span class="line">    Mat img_transform_imag = planes[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> core_x = img_transform_real.rows/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> core_y = img_transform_real.cols/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">20</span>;</span><br><span class="line">    <span class="type">float</span> h;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;img_transform_real.rows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;img_transform_real.cols;j++)&#123;</span><br><span class="line">            h = <span class="number">1</span>-<span class="built_in">exp</span>(-((i-core_x)*(i-core_x)+(j-core_y)*(j-core_y))/(<span class="number">2</span>*r*r));</span><br><span class="line">            img_transform_real.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j)*=h;</span><br><span class="line">            img_transform_imag.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j)*=h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    planes[<span class="number">0</span>] = img_transform_real;</span><br><span class="line">    planes[<span class="number">1</span>] = img_transform_imag;</span><br><span class="line">    Mat img_transform_ilpf; <span class="comment">// 定义高斯高通滤波结果</span></span><br><span class="line">    <span class="built_in">merge</span>(planes,<span class="number">2</span>,img_transform_ilpf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 傅里叶逆变换</span></span><br><span class="line">    Mat iDft[] =  &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">idft</span>(img_transform_ilpf,img_transform_ilpf);</span><br><span class="line">    <span class="built_in">split</span>(img_transform_ilpf,iDft); <span class="comment">// 分离通道，主要获取0通道</span></span><br><span class="line">    <span class="built_in">magnitude</span>(iDft[<span class="number">0</span>],iDft[<span class="number">1</span>],img_out); <span class="comment">// 计算复数的幅值 ，保存在iDft[0]</span></span><br><span class="line">    <span class="built_in">normalize</span>(iDft[<span class="number">0</span>],iDft[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>,NORM_MINMAX); <span class="comment">// 归一化</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;idft&quot;</span>,iDft[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-高斯高通滤波&quot;&gt;&lt;a href=&quot;#1-高斯高通滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 高斯高通滤波&quot;&gt;&lt;/a&gt;1. 高斯高通滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
  </entry>
  
  <entry>
    <title>【c++|opencv】三、频率域滤波---5.理想高通滤波 - C++ - opencv</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-5-%E7%90%86%E6%83%B3%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-5-%E7%90%86%E6%83%B3%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-22T07:25:17.000Z</published>
    <updated>2024-11-22T07:28:31.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-理想高通滤波"><a href="#1-理想高通滤波" class="headerlink" title="1. 理想高通滤波"></a>1. 理想高通滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mydft.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Mat img,img_gray,img_out,img_transform;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;could not load image...&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 傅里叶变换，img_out为可显示频谱图，img_transform为傅里叶变换复数</span></span><br><span class="line">    <span class="built_in">mydft</span>(img_gray,img_out,img_transform);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_out&quot;</span>,img_out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 理想高通滤波</span></span><br><span class="line">    Mat planes[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">split</span>(img_transform,planes); <span class="comment">// 分离通道，获取实部虚部</span></span><br><span class="line">    Mat img_transform_real = planes[<span class="number">0</span>];</span><br><span class="line">    Mat img_transform_imag = planes[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> core_x = img_transform_real.rows/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> core_y = img_transform_real.cols/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;img_transform_real.rows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;img_transform_real.cols;j++)&#123;</span><br><span class="line">            <span class="comment">// 距离中心的距离大于设置的半径r的点所在的值设为0</span></span><br><span class="line">            <span class="keyword">if</span>(((i-core_x)*(i-core_x)+(j-core_y)*(j-core_y))&gt;r*r)&#123;</span><br><span class="line">                img_transform_real.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j) = <span class="number">0</span>;</span><br><span class="line">                img_transform_imag.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j) = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    planes[<span class="number">0</span>] = img_transform_real;</span><br><span class="line">    planes[<span class="number">1</span>] = img_transform_imag;</span><br><span class="line">    Mat img_transform_ilpf; <span class="comment">// 定义理想高通滤波矩阵</span></span><br><span class="line">    <span class="built_in">merge</span>(planes,<span class="number">2</span>,img_transform_ilpf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 傅里叶变换</span></span><br><span class="line">    Mat iDft[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">idft</span>(img_transform_ilpf,img_transform_ilpf);</span><br><span class="line">    <span class="built_in">split</span>(img_transform_ilpf,iDft); <span class="comment">// 分离通道，主要获取0通道</span></span><br><span class="line">    <span class="built_in">magnitude</span>(iDft[<span class="number">0</span>],iDft[<span class="number">1</span>],img_out); <span class="comment">// 计算复数的幅值，保存在iDft[0]</span></span><br><span class="line">    <span class="built_in">normalize</span>(img_out,img_out,<span class="number">0</span>,<span class="number">1</span>,NORM_MINMAX); <span class="comment">// 归一化处理</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;idft&quot;</span>,iDft[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-理想高通滤波&quot;&gt;&lt;a href=&quot;#1-理想高通滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 理想高通滤波&quot;&gt;&lt;/a&gt;1. 理想高通滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
  </entry>
  
  <entry>
    <title>【c++|opencv】三、频率域滤波---4.巴特沃斯低通滤波 - C++ - opencv</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-4-%E5%B7%B4%E7%89%B9%E6%B2%83%E6%96%AF%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-4-%E5%B7%B4%E7%89%B9%E6%B2%83%E6%96%AF%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-22T07:24:37.000Z</published>
    <updated>2024-11-22T07:28:24.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-巴特沃斯低通滤波"><a href="#1-巴特沃斯低通滤波" class="headerlink" title="1. 巴特沃斯低通滤波"></a>1. 巴特沃斯低通滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mydft.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Salt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,img_out,img_transform;</span><br><span class="line"></span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;can not open the image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Salt</span>(img_gray,<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_gray_salt&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 傅里叶变换，img_out为可显示频谱图，img_transform为傅里叶变换的复数结果</span></span><br><span class="line">    <span class="built_in">mydft</span>(img_gray,img_out,img_transform);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_out&quot;</span>,img_out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 巴特沃斯低通滤波</span></span><br><span class="line">    Mat planes[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">split</span>(img_transform,planes); <span class="comment">// 分离通道获取实部和虚部</span></span><br><span class="line">    Mat img_transform_real = planes[<span class="number">0</span>];</span><br><span class="line">    Mat img_transform_imag = planes[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> core_x = img_transform_real.rows/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> core_y = img_transform_real.cols/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">60</span>;</span><br><span class="line">    <span class="type">float</span> h;</span><br><span class="line">    <span class="type">float</span> n = <span class="number">2</span>; <span class="comment">// 巴特沃斯系数</span></span><br><span class="line">    <span class="type">float</span> D; <span class="comment">// 距离中心距离</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;img_transform_real.rows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;img_transform_real.cols;j++)&#123;</span><br><span class="line">            D = (i-core_x)*(i-core_x)+(j-core_y)*(j-core_y);</span><br><span class="line">            h = <span class="number">1</span>/(<span class="number">1</span>+<span class="built_in">pow</span>((D/(r*r)),n));</span><br><span class="line">            img_transform_real.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j) *= h;</span><br><span class="line">            img_transform_imag.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j) *= h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    planes[<span class="number">0</span>] = img_transform_real;</span><br><span class="line">    planes[<span class="number">1</span>] = img_transform_imag;</span><br><span class="line">    Mat img_transform_ilpf; <span class="comment">// 定义巴特沃斯低通滤波结果</span></span><br><span class="line">    <span class="built_in">merge</span>(planes,<span class="number">2</span>,img_transform_ilpf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 傅里叶逆变换</span></span><br><span class="line">    Mat iDft[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">idft</span>(img_transform_ilpf,img_transform_ilpf); <span class="comment">// 傅里叶逆变换</span></span><br><span class="line">    <span class="built_in">split</span>(img_transform_ilpf,iDft); <span class="comment">// 分离通道，主要获取0通道</span></span><br><span class="line">    <span class="built_in">magnitude</span>(iDft[<span class="number">0</span>],iDft[<span class="number">1</span>],iDft[<span class="number">0</span>]); <span class="comment">// 计算复数的幅值，保存在iDft[0]</span></span><br><span class="line">    <span class="built_in">normalize</span>(iDft[<span class="number">0</span>],iDft[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>,NORM_MINMAX);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;idft&quot;</span>,iDft[<span class="number">0</span>]); <span class="comment">// 显示逆变换结果</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-巴特沃斯低通滤波&quot;&gt;&lt;a href=&quot;#1-巴特沃斯低通滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 巴特沃斯低通滤波&quot;&gt;&lt;/a&gt;1. 巴特沃斯低通滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
  </entry>
  
  <entry>
    <title>【c++|opencv】三、频率域滤波---3.高斯低通滤波 - C++ - opencv</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-3-%E9%AB%98%E6%96%AF%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-3-%E9%AB%98%E6%96%AF%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-22T07:24:12.000Z</published>
    <updated>2024-11-22T07:28:18.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-高斯低通滤波"><a href="#1-高斯低通滤波" class="headerlink" title="1. 高斯低通滤波"></a>1. 高斯低通滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mydft.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Salt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,img_out,img_transform;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;can&#x27;t open the image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_gray&quot;</span>,img_gray);</span><br><span class="line">    <span class="built_in">Salt</span>(img_gray,<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_gray_salt&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 傅里叶变换，img_out为可显示频谱图，img_transform为傅里叶变换的复数结果</span></span><br><span class="line">    <span class="built_in">mydft</span>(img_gray,img_out,img_transform);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_out&quot;</span>,img_out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 高斯低通滤波</span></span><br><span class="line">    Mat planes[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out.<span class="built_in">size</span>()),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">split</span>(img_transform,planes); <span class="comment">// 分离通道，获取实部和虚部</span></span><br><span class="line">    Mat img_transform_real = planes[<span class="number">0</span>];</span><br><span class="line">    Mat img_transform_imag = planes[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> core_x = img_transform_real.rows/<span class="number">2</span>; <span class="comment">// 频谱中心坐标</span></span><br><span class="line">    <span class="type">int</span> core_y = img_transform_real.cols/<span class="number">2</span>; </span><br><span class="line">    <span class="type">int</span> r = <span class="number">60</span>; <span class="comment">// 滤波半径</span></span><br><span class="line">    <span class="type">float</span> h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; img_transform_real.rows; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; img_transform_real.cols; j++)&#123;</span><br><span class="line">            h = <span class="built_in">exp</span>(-((i-core_x)*(i-core_x)+(j-core_y)*(j-core_y)/(<span class="number">2</span>*r*r)));</span><br><span class="line">            img_transform_real.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j) *= h;</span><br><span class="line">            img_transform_imag.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j) *= h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    planes[<span class="number">0</span>] = img_transform_real;</span><br><span class="line">    planes[<span class="number">1</span>] = img_transform_imag;</span><br><span class="line">    Mat img_transform_ilpd; <span class="comment">// 定义高斯低通滤波结果</span></span><br><span class="line">    <span class="built_in">merge</span>(planes,<span class="number">2</span>,img_transform_ilpd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 傅里叶变换</span></span><br><span class="line">    Mat iDft[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">idft</span>(img_transform_ilpd,img_transform_ilpd); <span class="comment">// 傅里叶变换</span></span><br><span class="line">    <span class="built_in">split</span>(img_transform_ilpd,iDft); <span class="comment">// 分离通道，主要获取0通道</span></span><br><span class="line">    <span class="built_in">magnitude</span>(iDft[<span class="number">0</span>],iDft[<span class="number">1</span>],iDft[<span class="number">0</span>]); <span class="comment">// 计算复数的幅值，保存在iDft[0]</span></span><br><span class="line">    <span class="built_in">normalize</span>(iDft[<span class="number">0</span>],iDft[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>,NORM_MINMAX); <span class="comment">// 归一化处理</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;idft&quot;</span>,iDft[<span class="number">0</span>]); <span class="comment">// 显示逆变换图像</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-高斯低通滤波&quot;&gt;&lt;a href=&quot;#1-高斯低通滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 高斯低通滤波&quot;&gt;&lt;/a&gt;1. 高斯低通滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
  </entry>
  
  <entry>
    <title>【c++|opencv】三、频率域滤波---2.理想低通滤波 - C++ - opencv</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-2-%E7%90%86%E6%83%B3%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-2-%E7%90%86%E6%83%B3%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-22T07:22:27.000Z</published>
    <updated>2024-11-22T07:28:12.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-理想低通滤波"><a href="#1-理想低通滤波" class="headerlink" title="1. 理想低通滤波"></a>1. 理想低通滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mydft.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Salt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,img_out,img_transform;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;can&#x27;t open image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Salt</span>(img_gray,<span class="number">10000</span>);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 傅里变换，img_out为可显示的频谱图，img_transform为傅里叶变换的复数结果</span></span><br><span class="line">    <span class="built_in">mydft</span>(img_gray,img_out,img_transform);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_out&quot;</span>,img_out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 理想低通滤波</span></span><br><span class="line">    Mat plances[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line">    <span class="built_in">split</span>(img_transform,plances); <span class="comment">// 分离通道，获取实部和虚部</span></span><br><span class="line">    Mat img_tansform_real = plances[<span class="number">0</span>];</span><br><span class="line">    Mat img_tansform_imag = plances[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> core_x = img_tansform_real.rows/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> core_y = img_tansform_real.cols/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> r =  <span class="number">80</span>; <span class="comment">// 滤波半径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;img_tansform_real.rows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;img_tansform_real.cols;j++)&#123;</span><br><span class="line">            <span class="comment">//距离中心的距离大于设置半径r的点所在值设为0</span></span><br><span class="line">            <span class="keyword">if</span>((i-core_x)*(i-core_x)+(j-core_y)*(j-core_y)&gt;r*r)&#123;</span><br><span class="line">                img_tansform_real.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j) = <span class="number">0</span>;</span><br><span class="line">                img_tansform_imag.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i,j) = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    plances[<span class="number">0</span>] = img_tansform_real;</span><br><span class="line">    plances[<span class="number">1</span>] = img_tansform_imag;</span><br><span class="line">    Mat img_transform_ilpf; <span class="comment">// 定义理想低通滤波矩阵</span></span><br><span class="line">    <span class="built_in">merge</span>(plances,<span class="number">2</span>,img_transform_ilpf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 傅里叶变换</span></span><br><span class="line">    Mat iDft[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_out),Mat::<span class="built_in">zeros</span>(img_out.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">idft</span>(img_transform_ilpf,img_transform_ilpf); <span class="comment">//傅里叶变换</span></span><br><span class="line">    <span class="built_in">split</span>(img_transform_ilpf,iDft); <span class="comment">// 傅里叶变换</span></span><br><span class="line">    <span class="built_in">magnitude</span>(iDft[<span class="number">0</span>],iDft[<span class="number">1</span>],img_out); <span class="comment">// 计算复数的幅值</span></span><br><span class="line">    <span class="built_in">normalize</span>(iDft[<span class="number">0</span>],iDft[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>,NORM_MINMAX); <span class="comment">// 归一化处理</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;idft&quot;</span>,iDft[<span class="number">0</span>]); <span class="comment">// 显示逆变换图像</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-理想低通滤波&quot;&gt;&lt;a href=&quot;#1-理想低通滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 理想低通滤波&quot;&gt;&lt;/a&gt;1. 理想低通滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
  </entry>
  
  <entry>
    <title>【c++|opencv】三、频率域滤波---1.傅里叶变换及频谱图 - C++ - opencv</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-1-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E5%8F%8A%E9%A2%91%E8%B0%B1%E5%9B%BE/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%89%E3%80%81%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2-1-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E5%8F%8A%E9%A2%91%E8%B0%B1%E5%9B%BE/</id>
    <published>2024-11-22T07:21:50.000Z</published>
    <updated>2024-11-22T07:28:07.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-傅里叶变换和滤波"><a href="#1-傅里叶变换和滤波" class="headerlink" title="1. 傅里叶变换和滤波"></a>1. 傅里叶变换和滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 傅里叶变换函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mydft</span><span class="params">(Mat img_input,Mat&amp; out_img,Mat&amp; transform_arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,img_out,img_transform;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;can&#x27;t open the image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Img&quot;</span>,img);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Img_gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 傅里叶变换,img_</span></span><br><span class="line">    <span class="built_in">mydft</span>(img_gray,img_out,img_transform);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img out&quot;</span>,img_out);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 傅里叶变换到频谱图和复数域结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mydft</span><span class="params">(Mat img_input,Mat&amp; out_img,Mat&amp; transform_arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 扩展图像矩阵，为2，3，5的倍数时运算速度快</span></span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">getOptimalDFTSize</span>(img_input.rows);</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">getOptimalDFTSize</span>(img_input.cols);</span><br><span class="line">    <span class="built_in">copyMakeBorder</span>(img_input,img_input,<span class="number">0</span>,m-img_input.rows,<span class="number">0</span>,n-img_input.cols,BORDER_CONSTANT,Scalar::<span class="built_in">all</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 创建双通道矩阵planes，用来存储复数的实部和虚部</span></span><br><span class="line">    Mat planes[] = &#123;<span class="built_in">Mat_</span>&lt;<span class="type">float</span>&gt;(img_input),Mat::<span class="built_in">zeros</span>(img_input.<span class="built_in">size</span>(),CV_32F)&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 从单通道数组中创建一个多通道数组：transform_arr。函数的Merge将几个数组合并为一个多通道阵列，即输出数组的每个元素将是输入数组元素的级联</span></span><br><span class="line">    <span class="built_in">merge</span>(planes,<span class="number">2</span>,transform_arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 进行傅里叶变换</span></span><br><span class="line">    <span class="built_in">dft</span>(transform_arr,transform_arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 计算复数的幅值，保存在out_img(频谱图)</span></span><br><span class="line">    <span class="built_in">split</span>(transform_arr,planes); <span class="comment">// 将双通道分为两个单通道，一个表示实部，一个表示虚部</span></span><br><span class="line">    <span class="built_in">magnitude</span>(planes[<span class="number">0</span>],planes[<span class="number">1</span>],out_img); <span class="comment">// 计算复数的幅值，保存在out_img(频谱图)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//6. 前面得到的频谱图数级过大，不好显示，因此转换</span></span><br><span class="line">    out_img +=<span class="built_in">Scalar</span>(<span class="number">1</span>); <span class="comment">// 取对数前所有像素值都+1，防止log0</span></span><br><span class="line">    <span class="built_in">log</span>(out_img,out_img); <span class="comment">// 取对数</span></span><br><span class="line">    <span class="built_in">normalize</span>(out_img,out_img,<span class="number">0</span>,<span class="number">1</span>,NORM_MINMAX); <span class="comment">// 归一化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 裁剪和重分布幅度图象限</span></span><br><span class="line">    out_img = <span class="built_in">out_img</span>(<span class="built_in">Rect</span>(<span class="number">0</span>,<span class="number">0</span>,out_img.cols &amp; <span class="number">-2</span>,out_img.rows &amp; <span class="number">-2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新排列傅里叶图像中的象限，使原点位于图像中心</span></span><br><span class="line">    <span class="type">int</span> cx = out_img.cols/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> cy = out_img.rows/<span class="number">2</span>;</span><br><span class="line">    <span class="function">Mat <span class="title">q0</span><span class="params">(out_img,Rect(<span class="number">0</span>,<span class="number">0</span>,cx,cy))</span></span>;</span><br><span class="line">    <span class="function">Mat <span class="title">q1</span><span class="params">(out_img,Rect(cx,<span class="number">0</span>,cx,cy))</span></span>;</span><br><span class="line">    <span class="function">Mat <span class="title">q2</span><span class="params">(out_img,Rect(<span class="number">0</span>,cy,cx,cy))</span></span>;</span><br><span class="line">    <span class="function">Mat <span class="title">q3</span><span class="params">(out_img,Rect(cx,cy,cx,cy))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换象限中心化</span></span><br><span class="line">    Mat tmp;</span><br><span class="line">    <span class="comment">// 左上和右下进行交换</span></span><br><span class="line">    q0.<span class="built_in">copyTo</span>(tmp);</span><br><span class="line">    q3.<span class="built_in">copyTo</span>(q0);</span><br><span class="line">    tmp.<span class="built_in">copyTo</span>(q3);</span><br><span class="line">    <span class="comment">// 右上与左下进行交换</span></span><br><span class="line">    q1.<span class="built_in">copyTo</span>(tmp);</span><br><span class="line">    q2.<span class="built_in">copyTo</span>(q1);</span><br><span class="line">    tmp.<span class="built_in">copyTo</span>(q2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-傅里叶变换和滤波&quot;&gt;&lt;a href=&quot;#1-傅里叶变换和滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 傅里叶变换和滤波&quot;&gt;&lt;/a&gt;1. 傅里叶变换和滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
  </entry>
  
  <entry>
    <title>【c++|opencv】二、灰度变换和空间滤波---6.锐化空间滤波</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-6-%E9%94%90%E5%8C%96%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-6-%E9%94%90%E5%8C%96%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-22T06:53:05.000Z</published>
    <updated>2024-11-22T07:06:12.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-锐化空间滤波"><a href="#1-锐化空间滤波" class="headerlink" title="1. 锐化空间滤波"></a>1. 锐化空间滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义滤波函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myfilter</span><span class="params">(Mat&amp; img_input,Mat&amp; img_output)</span></span>; <span class="comment">// 四邻域</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myfilter2</span><span class="params">(Mat&amp; img_input,Mat&amp; img_output)</span></span>; <span class="comment">// 八邻域</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,imt_output,img_output2;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;can not load image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">myfilter</span>(img_gray,imt_output); <span class="comment">// 四领域</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img output&quot;</span>,imt_output); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">myfilter2</span>(img_gray,img_output2); <span class="comment">// 八领域</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img output2&quot;</span>,img_output2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四领域</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myfilter</span><span class="params">(Mat&amp; img_input,Mat&amp; img_output)</span></span>&#123;</span><br><span class="line">    img_output = img_input.<span class="built_in">clone</span>();</span><br><span class="line">    <span class="type">int</span> la;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;img_input.rows<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;img_input.cols<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            la = <span class="number">4</span>*img_input.<span class="built_in">at</span>&lt;uchar&gt;(i,j)-img_input.<span class="built_in">at</span>&lt;uchar&gt;(i<span class="number">-1</span>,j)-img_input.<span class="built_in">at</span>&lt;uchar&gt;(i+<span class="number">1</span>,j)-</span><br><span class="line">            img_input.<span class="built_in">at</span>&lt;uchar&gt;(i,j<span class="number">-1</span>)-img_input.<span class="built_in">at</span>&lt;uchar&gt;(i,j+<span class="number">1</span>);</span><br><span class="line">            img_output.<span class="built_in">at</span>&lt;uchar&gt;(i,j) = <span class="built_in">saturate_cast</span>&lt;uchar&gt;(la+img_output.<span class="built_in">at</span>&lt;uchar&gt;(i,j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 八领域</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myfilter2</span><span class="params">(Mat&amp; img_input,Mat&amp; img_output)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    img_output = img_input.<span class="built_in">clone</span>();</span><br><span class="line">    <span class="type">int</span> la2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;img_input.rows<span class="number">-1</span>;i++)&#123;   </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;img_input.cols<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            la2 = <span class="number">8</span>*img_input.<span class="built_in">at</span>&lt;uchar&gt;(i,j)-img_input.<span class="built_in">at</span>&lt;uchar&gt;(i<span class="number">-1</span>,j)-img_input.<span class="built_in">at</span>&lt;uchar&gt;(i+<span class="number">1</span>,j)-</span><br><span class="line">            img_input.<span class="built_in">at</span>&lt;uchar&gt;(i,j<span class="number">-1</span>)-img_input.<span class="built_in">at</span>&lt;uchar&gt;(i,j+<span class="number">1</span>)-img_input.<span class="built_in">at</span>&lt;uchar&gt;(i<span class="number">-1</span>,j<span class="number">-1</span>)-</span><br><span class="line">            img_input.<span class="built_in">at</span>&lt;uchar&gt;(i<span class="number">-1</span>,j+<span class="number">1</span>)-img_input.<span class="built_in">at</span>&lt;uchar&gt;(i+<span class="number">1</span>,j<span class="number">-1</span>)-img_input.<span class="built_in">at</span>&lt;uchar&gt;(i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            img_output.<span class="built_in">at</span>&lt;uchar&gt;(i,j) = <span class="built_in">saturate_cast</span>&lt;uchar&gt;(la2+img_output.<span class="built_in">at</span>&lt;uchar&gt;(i,j));</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-锐化空间滤波&quot;&gt;&lt;a href=&quot;#1-锐化空间滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 锐化空间滤波&quot;&gt;&lt;/a&gt;1. 锐化空间滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>【c++|opencv】二、灰度变换和空间滤波---5.中值滤波</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-5-%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-5-%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-22T06:52:34.000Z</published>
    <updated>2024-11-22T07:06:08.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-中值滤波"><a href="#1-中值滤波" class="headerlink" title="1. 中值滤波"></a>1. 中值滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Salt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myfilter</span><span class="params">(<span class="type">int</span> filter_size,Mat&amp; img_input,Mat&amp; img_output)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mysort</span><span class="params">(Mat&amp; sortarray,<span class="type">int</span> filter_size)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,img_output,img_output2;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;could not load image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">Salt</span>(img_gray,<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//OpenCV自带滤波器</span></span><br><span class="line">    <span class="type">int</span> a=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">medianBlur</span>(img_gray,img_output,a);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;medianBlur&quot;</span>,img_output);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自编函数</span></span><br><span class="line">    <span class="built_in">myfilter</span>(a,img_gray,img_output2);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;myfilter&quot;</span>,img_output2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myfilter</span><span class="params">(<span class="type">int</span> filter_size,Mat&amp; img_input,Mat&amp; img_output)</span></span>&#123;</span><br><span class="line">    img_output = img_input.<span class="built_in">clone</span>();</span><br><span class="line">    <span class="function">Mat <span class="title">sortarray</span><span class="params">(<span class="number">1</span>,filter_size*filter_size,CV_8U)</span></span>;</span><br><span class="line">    <span class="type">int</span> k = (filter_size<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=k;i&lt;img_input.rows-k;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=k;j&lt;img_input.cols-k;j++)&#123;</span><br><span class="line">            <span class="type">int</span> h = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> m=-k;m&lt;=k;m++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> n=-k;n&lt;=k;n++)&#123;</span><br><span class="line">                    sortarray.<span class="built_in">at</span>&lt;uchar&gt;(h) = img_input.<span class="built_in">at</span>&lt;uchar&gt;(i+m,j+n);</span><br><span class="line">                    h++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            img_output.<span class="built_in">at</span>&lt;uchar&gt;(i,j) = <span class="built_in">mysort</span>(sortarray,filter_size*filter_size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找中值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mysort</span><span class="params">(Mat&amp; sortarray,<span class="type">int</span> filter_size)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> exchange;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=filter_size<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;filter_size<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (sortarray.<span class="built_in">at</span>&lt;uchar&gt;(j<span class="number">-1</span>) &gt; sortarray.<span class="built_in">at</span>&lt;uchar&gt;(j))&#123;</span><br><span class="line">                exchange = sortarray.<span class="built_in">at</span>&lt;uchar&gt;(j<span class="number">-1</span>);</span><br><span class="line">                sortarray.<span class="built_in">at</span>&lt;uchar&gt;(j<span class="number">-1</span>) = sortarray.<span class="built_in">at</span>&lt;uchar&gt;(j);</span><br><span class="line">                sortarray.<span class="built_in">at</span>&lt;uchar&gt;(j) = exchange;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sortarray.<span class="built_in">at</span>&lt;uchar&gt;((filter_size+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-中值滤波&quot;&gt;&lt;a href=&quot;#1-中值滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 中值滤波&quot;&gt;&lt;/a&gt;1. 中值滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>【c++|opencv】二、灰度变换和空间滤波---4.高斯滤波</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-4-%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-4-%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-22T06:52:00.000Z</published>
    <updated>2024-11-22T07:06:03.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-高斯滤波"><a href="#1-高斯滤波" class="headerlink" title="1. 高斯滤波"></a>1. 高斯滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Salt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义高斯滤波函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myfilter</span><span class="params">(<span class="type">int</span> filter_size,Mat&amp; img_input,Mat&amp; img_output)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,img_out,img_out2;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;can&#x27;t open the image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">Salt</span>(img_gray,<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Opencv 自带的滤波</span></span><br><span class="line">    <span class="type">int</span> a= <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">GaussianBlur</span>(img_gray,img_out,<span class="built_in">Size</span>(a,a),<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;GaussianBlur&quot;</span>,img_out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义高斯滤波</span></span><br><span class="line">    <span class="built_in">myfilter</span>(a,img_gray,img_out2);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;myfilter&quot;</span>,img_out2);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myfilter</span><span class="params">(<span class="type">int</span> filter_size,Mat&amp; img_input,Mat&amp; img_output)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    img_output = img_input.<span class="built_in">clone</span>();</span><br><span class="line">    <span class="type">int</span> k = (filter_size<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; img_input.rows-k; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = k; j &lt; img_input.cols-k; j++)&#123;</span><br><span class="line">            <span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">            <span class="type">double</span> sum1 = <span class="number">0.0</span>;</span><br><span class="line">            <span class="type">double</span> sigma = <span class="number">7</span>;</span><br><span class="line">            <span class="type">double</span> g;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> m = -k; m &lt;= k; m++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> n = -k; n &lt;= k; n++)&#123;</span><br><span class="line">                    g = <span class="built_in">exp</span>(-(m*m+n*n)/(<span class="number">2</span>*sigma*sigma));</span><br><span class="line">                    sum += g*img_input.<span class="built_in">at</span>&lt;uchar&gt;(i+m,j+n);</span><br><span class="line">                    sum1 += g;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            img_output.<span class="built_in">at</span>&lt;uchar&gt;(i,j) = (<span class="type">int</span>)(sum/sum1);</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-高斯滤波&quot;&gt;&lt;a href=&quot;#1-高斯滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 高斯滤波&quot;&gt;&lt;/a&gt;1. 高斯滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>【c++|opencv】二、灰度变换和空间滤波---3.均值滤波</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-3-%E5%9D%87%E5%80%BC%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-3-%E5%9D%87%E5%80%BC%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-22T06:51:17.000Z</published>
    <updated>2024-11-22T07:05:58.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-均值滤波"><a href="#1-均值滤波" class="headerlink" title="1. 均值滤波"></a>1. 均值滤波</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Salt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义盒式滤波器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myfilter</span><span class="params">(<span class="type">int</span> filter_size,Mat&amp; img_input,Mat&amp; img_output)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,img_output,img_output2;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;can not load image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">Salt</span>(img_gray,<span class="number">5000</span>);  </span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img_gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义滤波</span></span><br><span class="line">    <span class="type">int</span> filter_size = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">myfilter</span>(filter_size,img_gray,img_output);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// opencv 自带滤波</span></span><br><span class="line">    <span class="built_in">blur</span>(img_gray,img_output2,<span class="built_in">Size</span>(filter_size,filter_size));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img out 1&quot;</span>,img_output);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img out 2&quot;</span>,img_output2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 盒式滤波</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myfilter</span><span class="params">(<span class="type">int</span> filter_size,Mat&amp; img_input,Mat&amp; img_output)</span></span>&#123;</span><br><span class="line">    img_output = img_input.<span class="built_in">clone</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k = (filter_size - <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k;i&lt;(img_input.rows - k);i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = k;j&lt;(img_input.cols - k);j++)&#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> m = -k;m&lt;k+<span class="number">1</span>;m++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> n=-k;n&lt;k+<span class="number">1</span>;n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum += img_input.<span class="built_in">at</span>&lt;uchar&gt;(i+m,j+n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            img_output.<span class="built_in">at</span>&lt;uchar&gt;(i,j) = sum/(filter_size*filter_size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-均值滤波&quot;&gt;&lt;a href=&quot;#1-均值滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 均值滤波&quot;&gt;&lt;/a&gt;1. 均值滤波&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>【c++|opencv】二、灰度变换和空间滤波---2.直方图</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-2-%E7%9B%B4%E6%96%B9%E5%9B%BE/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-2-%E7%9B%B4%E6%96%B9%E5%9B%BE/</id>
    <published>2024-11-22T06:50:48.000Z</published>
    <updated>2024-11-22T07:05:54.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-图像直方图"><a href="#1-图像直方图" class="headerlink" title="1. 图像直方图"></a>1. 图像直方图</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img, img_gray,hist;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Could not open or find the image&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cvtColor</span>(img, img_gray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取图像直方图</span></span><br><span class="line">    <span class="type">int</span> histSize = <span class="number">256</span>;</span><br><span class="line">    <span class="type">float</span> range[] = &#123; <span class="number">0</span>, <span class="number">256</span> &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">float</span>* histRange = &#123; range &#125;;</span><br><span class="line">    <span class="built_in">calcHist</span>(&amp;img_gray, <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">Mat</span>(), hist, <span class="number">1</span>, &amp;histSize, &amp;histRange, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建直方图</span></span><br><span class="line">    <span class="type">int</span> hist_h = <span class="number">300</span>;</span><br><span class="line">    <span class="type">int</span> hist_w = <span class="number">512</span>;</span><br><span class="line">    <span class="type">int</span> bin_w = hist_w / histSize; <span class="comment">// 直方图的等级</span></span><br><span class="line">    <span class="function">Mat <span class="title">hist_img</span><span class="params">(hist_h, hist_w, CV_8UC3, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制并显示直方图</span></span><br><span class="line">    <span class="built_in">normalize</span>(hist, hist, <span class="number">0</span>, hist_h, NORM_MINMAX, <span class="number">-1</span>, <span class="built_in">Mat</span>()); <span class="comment">// 归一化直方图</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;histSize;i++)&#123;</span><br><span class="line">        <span class="built_in">line</span>(hist_img, <span class="built_in">Point</span>(bin_w*(i<span class="number">-1</span>), hist_h - <span class="built_in">cvRound</span>(hist.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i<span class="number">-1</span>))),</span><br><span class="line">             <span class="built_in">Point</span>(bin_w*(i), hist_h - <span class="built_in">cvRound</span>(hist.<span class="built_in">at</span>&lt;<span class="type">float</span>&gt;(i))),</span><br><span class="line">             <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;直方图&quot;</span>,hist_img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-直方图均衡化"><a href="#2-直方图均衡化" class="headerlink" title="2. 直方图均衡化"></a>2. 直方图均衡化</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img,img_gray,img_enhanced;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Error&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cvtColor</span>(img,img_gray,COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;gray&quot;</span>,img_gray);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">equalizeHist</span>(img_gray,img_enhanced); <span class="comment">// 直方图均衡化</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;enhanced&quot;</span>,img_enhanced);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-图像直方图&quot;&gt;&lt;a href=&quot;#1-图像直方图&quot; class=&quot;headerlink&quot; title=&quot;1. 图像直方图&quot;&gt;&lt;/a&gt;1. 图像直方图&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>【c++|opencv】二、灰度变换和空间滤波---1.灰度变换</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-1-%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%BA%8C%E3%80%81%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-1-%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2/</id>
    <published>2024-11-22T06:49:56.000Z</published>
    <updated>2024-11-22T07:05:48.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-灰度变换"><a href="#1-灰度变换" class="headerlink" title="1. 灰度变换"></a>1. 灰度变换</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    Mat img,out_img,img_gray;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Could not open or find the image&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cvtColor</span>(img, img_gray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img gray&quot;</span>,img_gray); </span><br><span class="line"></span><br><span class="line">    out_img = img_gray.<span class="built_in">clone</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;img_gray.rows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;img_gray.cols;j++)&#123;</span><br><span class="line">            <span class="comment">// 灰度翻转</span></span><br><span class="line">            out_img.<span class="built_in">at</span>&lt;uchar&gt;(i,j) = <span class="number">255</span> - img_gray.<span class="built_in">at</span>&lt;uchar&gt;(i,j); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;灰度翻转&quot;</span>,out_img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-对数变换"><a href="#2-对数变换" class="headerlink" title="2. 对数变换"></a>2. 对数变换</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    Mat img,out_img,img_gray;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Could not open or find the image&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cvtColor</span>(img, img_gray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img gray&quot;</span>,img_gray); </span><br><span class="line"></span><br><span class="line">    out_img = img_gray.<span class="built_in">clone</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;img_gray.rows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;img_gray.cols;j++)&#123;</span><br><span class="line">            <span class="comment">// 对数变换6*log(r+1) 伽马变换</span></span><br><span class="line">            out_img.<span class="built_in">at</span>&lt;uchar&gt;(i,j) = <span class="number">6</span>*<span class="built_in">log</span>((<span class="type">double</span>)(img_gray.<span class="built_in">at</span>&lt;uchar&gt;(i,j)) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">normalize</span>(out_img,out_img,<span class="number">0</span>,<span class="number">255</span>,NORM_MINMAX); <span class="comment">// 图像归一化</span></span><br><span class="line">    <span class="built_in">convertScaleAbs</span>(out_img,out_img); <span class="comment">// 数据类型转换到CV_8U</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;对数变换&quot;</span>,out_img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-伽马变换"><a href="#3-伽马变换" class="headerlink" title="3. 伽马变换"></a>3. 伽马变换</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    Mat img,out_img,img_gray;</span><br><span class="line">    img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Could not open or find the image&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cvtColor</span>(img, img_gray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img gray&quot;</span>,img_gray); </span><br><span class="line"></span><br><span class="line">    out_img = img_gray.<span class="built_in">clone</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;img_gray.rows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;img_gray.cols;j++)&#123;</span><br><span class="line">            <span class="comment">// 伽马变换6*r^0.5</span></span><br><span class="line">            out_img.<span class="built_in">at</span>&lt;uchar&gt;(i,j) = <span class="number">6</span>*<span class="built_in">pow</span>((<span class="type">double</span>)(img_gray.<span class="built_in">at</span>&lt;uchar&gt;(i,j)),<span class="number">0.5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">normalize</span>(out_img,out_img,<span class="number">0</span>,<span class="number">255</span>,NORM_MINMAX); <span class="comment">// 图像归一化</span></span><br><span class="line">    <span class="built_in">convertScaleAbs</span>(out_img,out_img); <span class="comment">// 数据类型转换到CV_8U</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;伽马变换&quot;</span>,out_img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-灰度变换&quot;&gt;&lt;a href=&quot;#1-灰度变换&quot; class=&quot;headerlink&quot; title=&quot;1. 灰度变换&quot;&gt;&lt;/a&gt;1. 灰度变换&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>【c++|opencv】一、基础操作---4.访问图像像素</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-4-%E8%AE%BF%E9%97%AE%E5%9B%BE%E5%83%8F%E5%83%8F%E7%B4%A0/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-4-%E8%AE%BF%E9%97%AE%E5%9B%BE%E5%83%8F%E5%83%8F%E7%B4%A0/</id>
    <published>2024-11-22T06:30:16.000Z</published>
    <updated>2024-11-22T07:33:36.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-访问图像像素"><a href="#1-访问图像像素" class="headerlink" title="1. 访问图像像素"></a>1. 访问图像像素</h1><h2 id="1-1-访问某像素"><a href="#1-1-访问某像素" class="headerlink" title="1.1 访问某像素"></a>1.1 访问某像素</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//灰度图像：</span></span><br><span class="line">image.<span class="built_in">at</span>&lt;uchar&gt;(j, i) <span class="comment">//j为行数，i为列数</span></span><br><span class="line"><span class="comment">//BGR彩色图像</span></span><br><span class="line">image.<span class="built_in">at</span>&lt;Vec3b&gt;(j, i)[<span class="number">0</span>] <span class="comment">//B分量</span></span><br><span class="line">image.<span class="built_in">at</span>&lt;Vec3b&gt;(j, i)[<span class="number">1</span>] <span class="comment">//G分量</span></span><br><span class="line">image.<span class="built_in">at</span>&lt;Vec3b&gt;(j, i)[<span class="number">2</span>] <span class="comment">//R分量</span></span><br></pre></td></tr></table></figure><h2 id="1-2-遍历像素"><a href="#1-2-遍历像素" class="headerlink" title="1.2 遍历像素"></a>1.2 遍历像素</h2><p>以添加噪声为例</p><h3 id="1-2-1-准备"><a href="#1-2-1-准备" class="headerlink" title="1.2.1 准备"></a>1.2.1 准备</h3><p>创建添加噪声函数</p><p>Salt.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Salt</span><span class="params">(Mat img,<span class="type">int</span> n)</span></span>; <span class="comment">// n加入噪声点数</span></span><br></pre></td></tr></table></figure><p>Salt.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Salt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Salt</span><span class="params">(Mat img,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 随机数生成器</span></span><br><span class="line">    default_random_engine generater;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">randRow</span><span class="params">(<span class="number">0</span>,img.rows<span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">randCol</span><span class="params">(<span class="number">0</span>,img.cols<span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">        i=<span class="built_in">randRow</span>(generater);</span><br><span class="line">        j=<span class="built_in">randCol</span>(generater);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (img.<span class="built_in">channels</span>() == <span class="number">1</span>)&#123;</span><br><span class="line">            img.<span class="built_in">at</span>&lt;uchar&gt;(i,j) = <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (img.<span class="built_in">channels</span>() == <span class="number">3</span>)&#123;</span><br><span class="line">            img.<span class="built_in">at</span>&lt;Vec3b&gt;(i,j)[<span class="number">0</span>] = <span class="number">255</span>;</span><br><span class="line">            img.<span class="built_in">at</span>&lt;Vec3b&gt;(i,j)[<span class="number">1</span>] = <span class="number">255</span>;</span><br><span class="line">            img.<span class="built_in">at</span>&lt;Vec3b&gt;(i,j)[<span class="number">2</span>] = <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-添加噪声"><a href="#1-2-2-添加噪声" class="headerlink" title="1.2.2 添加噪声"></a>1.2.2 添加噪声</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Salt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Could not open or find the image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Img&quot;</span>,img);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Salt</span>(img,<span class="number">5000</span>); <span class="comment">// 加入噪声点</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Salt&quot;</span>,img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-指针遍历"><a href="#1-3-指针遍历" class="headerlink" title="1.3 指针遍历"></a>1.3 指针遍历</h2><h3 id="1-3-1-以卷积运算为例"><a href="#1-3-1-以卷积运算为例" class="headerlink" title="1.3.1 以卷积运算为例"></a>1.3.1 以卷积运算为例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Salt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Could not open or find the image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mat out_img;</span><br><span class="line">    out_img = <span class="built_in">Mat</span>(img.<span class="built_in">size</span>(),img.<span class="built_in">type</span>()); <span class="comment">// 定义输出图像大小</span></span><br><span class="line">    out_img = img.<span class="built_in">clone</span>(); <span class="comment">// clone原图像像素值</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rows = img.rows; <span class="comment">// 原图行数</span></span><br><span class="line">    <span class="type">int</span> stepx = img.<span class="built_in">channels</span>(); <span class="comment">// 原图通道数</span></span><br><span class="line">    <span class="type">int</span> cols = (img.cols)*img.<span class="built_in">channels</span>(); <span class="comment">// 矩阵总列数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> row=<span class="number">1</span>;row&lt;rows<span class="number">-1</span>;row++)&#123;</span><br><span class="line">        <span class="type">const</span> uchar* previous = img.<span class="built_in">ptr</span>&lt;uchar&gt;(row<span class="number">-1</span>); <span class="comment">// 原图上一行指针</span></span><br><span class="line">        <span class="type">const</span> uchar* current = img.<span class="built_in">ptr</span>&lt;uchar&gt;(row); <span class="comment">// 原图当前行指针</span></span><br><span class="line">        <span class="type">const</span> uchar* next = img.<span class="built_in">ptr</span>&lt;uchar&gt;(row+<span class="number">1</span>); <span class="comment">// 原图下一行指针</span></span><br><span class="line"></span><br><span class="line">        uchar* output = out_img.<span class="built_in">ptr</span>&lt;uchar&gt;(row); <span class="comment">// 输出图像当前指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> col=stepx;col&lt;cols-stepx;col++)&#123; <span class="comment">// 对列进行遍历</span></span><br><span class="line">            <span class="comment">// saturate_cast&lt;uchar&gt;(a) 当a小于0，输出0，当a大于255输出255，0-255之间原样输出</span></span><br><span class="line">            output[col] = <span class="built_in">saturate_cast</span>&lt;uchar&gt;(<span class="number">5</span>*current[col]-(previous[col]+current[col-stepx] + current[col+stepx] + next[col]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Out&quot;</span>,out_img);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-自带的卷积运算"><a href="#1-3-2-自带的卷积运算" class="headerlink" title="1.3.2 自带的卷积运算"></a>1.3.2 自带的卷积运算</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Salt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Could not open or find the image&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat out_img;</span><br><span class="line"></span><br><span class="line">    Mat kernel = (<span class="built_in">Mat_</span>&lt;<span class="type">char</span>&gt;(<span class="number">3</span>,<span class="number">3</span>)&lt;&lt;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">5</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">filter2D</span>(img,out_img,img.<span class="built_in">depth</span>(),kernel); <span class="comment">// 卷积</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Out&quot;</span>,out_img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-访问图像像素&quot;&gt;&lt;a href=&quot;#1-访问图像像素&quot; class=&quot;headerlink&quot; title=&quot;1. 访问图像像素&quot;&gt;&lt;/a&gt;1. 访问图像像素&lt;/h1&gt;&lt;h2 id=&quot;1-1-访问某像素&quot;&gt;&lt;a href=&quot;#1-1-访问某像素&quot; class=&quot;</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>【c++|opencv】一、基础操作----2.图像信息获取</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-2-%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-2-%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/</id>
    <published>2024-11-22T06:28:43.000Z</published>
    <updated>2024-11-22T06:29:17.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-图像信息获取"><a href="#1-图像信息获取" class="headerlink" title="1. 图像信息获取"></a>1. 图像信息获取</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取图像信息</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Error: Could not load image.&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;img row: &quot;</span>&lt;&lt;img.rows&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;img col: &quot;</span>&lt;&lt;img.cols&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;img ch: &quot;</span>&lt;&lt;img.<span class="built_in">channels</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-图像ROI"><a href="#2-图像ROI" class="headerlink" title="2. 图像ROI"></a>2. 图像ROI</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取图像信息</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;/home/v/home.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Error: Could not load image.&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图像信息</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;img row: &quot;</span>&lt;&lt;img.rows&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;img col: &quot;</span>&lt;&lt;img.cols&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;img ch: &quot;</span>&lt;&lt;img.<span class="built_in">channels</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图像roi</span></span><br><span class="line">    <span class="function">Mat <span class="title">imageROI</span><span class="params">(img, Rect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">150</span>))</span></span>;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;imageROI&quot;</span>,imageROI);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-图像信息获取&quot;&gt;&lt;a href=&quot;#1-图像信息获取&quot; class=&quot;headerlink&quot; title=&quot;1. 图像信息获取&quot;&gt;&lt;/a&gt;1. 图像信息获取&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>【c++|opencv】一、基础操作----1.图像读取</title>
    <link href="http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-1-%E5%9B%BE%E5%83%8F%E8%AF%BB%E5%8F%96/"/>
    <id>http://hutalk.top/2024/11/22/opencv/%E3%80%90c++|opencv%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-1-%E5%9B%BE%E5%83%8F%E8%AF%BB%E5%8F%96/</id>
    <published>2024-11-22T06:24:00.000Z</published>
    <updated>2024-11-22T06:25:19.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-图像读取、显示、保存"><a href="#1-图像读取、显示、保存" class="headerlink" title="1. 图像读取、显示、保存"></a>1. 图像读取、显示、保存</h1><pre><code class="c++">// 读取、显示、保存图像#include &lt;opencv2/opencv.hpp&gt;#include &lt;iostream&gt;using namespace cv;using namespace std;int main()&#123;    Mat img; // 创建空图像    img = imread(&quot;/home/v/home.png&quot;) ;    if(img.empty())&#123;        cout &lt;&lt; &quot;读取图片失败&quot; &lt;&lt; endl;        return -1;    &#125;    namedWindow(&quot;home&quot;); // 无这行窗口大小不能改变    imshow(&quot;home&quot;, img);    imwrite(&quot;a.png&quot;,img);    waitKey(0);    return 0;&#125;```</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-图像读取、显示、保存&quot;&gt;&lt;a href=&quot;#1-图像读取、显示、保存&quot; class=&quot;headerlink&quot; title=&quot;1. 图像读取、显示、保存&quot;&gt;&lt;/a&gt;1. 图像读取、显示、保存&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;// 读取、显示</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/categories/C/opencv/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="opencv" scheme="http://hutalk.top/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hutalk.top/2024/11/22/hello-world/"/>
    <id>http://hutalk.top/2024/11/22/hello-world/</id>
    <published>2024-11-22T02:39:02.730Z</published>
    <updated>2024-11-22T02:39:02.730Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【PCL】7. 滤波</title>
    <link href="http://hutalk.top/2024/11/21/PCL/%E3%80%90PCL%E3%80%917.%20%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hutalk.top/2024/11/21/PCL/%E3%80%90PCL%E3%80%917.%20%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-11-21T09:32:09.000Z</published>
    <updated>2024-11-22T06:48:21.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-直通滤波"><a href="#1-直通滤波" class="headerlink" title="1. 直通滤波"></a>1. 直通滤波</h1><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/filters/passthrough.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span>&#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_filtered</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成数据</span></span><br><span class="line">    cloud-&gt;width = <span class="number">5</span>;</span><br><span class="line">    cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">    cloud-&gt;points.<span class="built_in">resize</span>(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        cloud-&gt;points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud-&gt;points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud-&gt;points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印滤波前数据</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;PointCloud before filtering has: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[i].x &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; cloud-&gt;points[i].y &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; cloud-&gt;points[i].z &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 创建滤波器对象，对z轴设置范围0.0～1.0之间，不在该范围内的点过滤</span></span><br><span class="line">    pcl::PassThrough&lt;pcl::PointXYZ&gt; pass;</span><br><span class="line">    pass.<span class="built_in">setInputCloud</span>(cloud);</span><br><span class="line">    pass.<span class="built_in">setFilterFieldName</span>(<span class="string">&quot;z&quot;</span>);</span><br><span class="line">    pass.<span class="built_in">setFilterLimits</span>(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    pass.<span class="built_in">filter</span>(*cloud_filtered);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印滤波后数据</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;PointCloud after filtering has: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_filtered-&gt;points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_filtered-&gt;points[i].x &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; cloud_filtered-&gt;points[i].y &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; cloud_filtered-&gt;points[i].z &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以对坐标轴进行过滤，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill in the cloud data</span></span><br><span class="line">pcl::PCDReader reader;</span><br><span class="line">reader.<span class="built_in">read</span>(<span class="string">&quot;16line.pcd&quot;</span>, *cloud);</span><br><span class="line"></span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Cloud before filtering: &quot;</span> &lt;&lt; cloud-&gt;points.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_filtered2</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_filtered3</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the filtering object</span></span><br><span class="line">pcl::PassThrough&lt;pcl::PointXYZ&gt; pass;</span><br><span class="line">pass.<span class="built_in">setInputCloud</span>(cloud);</span><br><span class="line">pass.<span class="built_in">setFilterFieldName</span>(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">pass.<span class="built_in">setFilterLimits</span>(<span class="number">-5.0</span>, <span class="number">5.0</span>);</span><br><span class="line"><span class="comment">// pass.setFilterLimitsNegative(true);</span></span><br><span class="line">pass.<span class="built_in">filter</span>(*cloud_filtered2);</span><br><span class="line"><span class="comment">// filter range Y-axis</span></span><br><span class="line">pass.<span class="built_in">setInputCloud</span>(cloud_filtered2);</span><br><span class="line">pass.<span class="built_in">setFilterFieldName</span>(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">pass.<span class="built_in">setFilterLimits</span>(<span class="number">-5.0</span>, <span class="number">5.0</span>);</span><br><span class="line">pass.<span class="built_in">filter</span>(*cloud_filtered3);</span><br><span class="line">   <span class="comment">// filter range Z-axis</span></span><br><span class="line">pass.<span class="built_in">setInputCloud</span>(cloud_filtered3);</span><br><span class="line">pass.<span class="built_in">setFilterFieldName</span>(<span class="string">&quot;z&quot;</span>);</span><br><span class="line">pass.<span class="built_in">setFilterLimits</span>(<span class="number">-0.5</span>, <span class="number">3.0</span>);</span><br><span class="line">pass.<span class="built_in">filter</span>(*cloud_filtered);</span><br></pre></td></tr></table></figure><h1 id="2-VoxelGrid体素网格法下采样"><a href="#2-VoxelGrid体素网格法下采样" class="headerlink" title="2. VoxelGrid体素网格法下采样"></a>2. VoxelGrid体素网格法下采样</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/filters/voxel_grid.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_filtered</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点云对象读取</span></span><br><span class="line">    pcl::PCDReader reader;</span><br><span class="line">    reader.<span class="built_in">read</span>(<span class="string">&quot;../table_scene_lms400.pcd&quot;</span>, *cloud);</span><br><span class="line"></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;PointCloud before filtering has: &quot;</span> &lt;&lt; cloud-&gt;width * cloud-&gt;height</span><br><span class="line">              &lt;&lt; <span class="string">&quot; data points.(&quot;</span> &lt;&lt;pcl::<span class="built_in">getFieldsList</span>(*cloud) &lt;&lt; <span class="string">&quot;).&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建体素网格滤波器对象</span></span><br><span class="line">    pcl::VoxelGrid&lt;pcl::PointXYZ&gt; vg;</span><br><span class="line">    vg.<span class="built_in">setInputCloud</span>(cloud); <span class="comment">// 设置输入点云</span></span><br><span class="line">    vg.<span class="built_in">setLeafSize</span>(<span class="number">0.01f</span>, <span class="number">0.01f</span>, <span class="number">0.01f</span>); <span class="comment">// 设置体素网格大小</span></span><br><span class="line">    vg.<span class="built_in">filter</span>(*cloud_filtered); <span class="comment">// 执行滤波操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出滤波后的点云信息</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;PointCloud after filtering has: &quot;</span> &lt;&lt; cloud_filtered-&gt;width * cloud_filtered-&gt;height</span><br><span class="line">              &lt;&lt; <span class="string">&quot; data points.(&quot;</span> &lt;&lt; pcl::<span class="built_in">getFieldsList</span>(*cloud_filtered) &lt;&lt; <span class="string">&quot;).&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-直通滤波&quot;&gt;&lt;a href=&quot;#1-直通滤波&quot; class=&quot;headerlink&quot; title=&quot;1. 直通滤波&quot;&gt;&lt;/a&gt;1. 直通滤波&lt;/h1&gt;&lt;p&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/categories/C/PCL/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>【PCL】6. 输入输出</title>
    <link href="http://hutalk.top/2024/11/21/PCL/%E3%80%90PCL%E3%80%916.%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://hutalk.top/2024/11/21/PCL/%E3%80%90PCL%E3%80%916.%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</id>
    <published>2024-11-21T09:30:19.000Z</published>
    <updated>2024-11-22T06:48:18.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1. 读取文件"></a>1. 读取文件</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span>&#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开点文件</span></span><br><span class="line">    <span class="keyword">if</span> (pcl::io::<span class="built_in">loadPCDFile</span>&lt;pcl::PointXYZ&gt;(<span class="string">&quot;../test.pcd&quot;</span>, *cloud) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">PCL_ERROR</span>(<span class="string">&quot;Couldn&#x27;t read file point_cloud.pcd \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认就是二进制块读取，转换为模块化PointCloud</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Loaded &quot;</span></span><br><span class="line">             &lt;&lt; cloud-&gt;width * cloud-&gt;height</span><br><span class="line">             &lt;&lt; <span class="string">&quot; data points from point_cloud.pcd with the following fields: &quot;</span></span><br><span class="line">             &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[i].x</span><br><span class="line">                  &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[i].y</span><br><span class="line">                  &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[i].z &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-保存数据"><a href="#2-保存数据" class="headerlink" title="2. 保存数据"></a>2. 保存数据</h1><p>保存数据总共两种方式，</p><p>一种是保存成ascii格式，一种是保存成二进制格式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 从硬盘中读取点云文件</span></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_in</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">    pcl::PCDReader reader; <span class="comment">// 定义点云读取对象</span></span><br><span class="line">    <span class="keyword">if</span> (reader.<span class="built_in">read</span>(<span class="string">&quot;../test.pcd&quot;</span>, *cloud_in) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">PCL_ERROR</span>(<span class="string">&quot;Couldn&#x27;t read file test.pcd \n&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt; <span class="string">&quot;-&gt;loaded &quot;</span> &lt;&lt; cloud_in-&gt;points.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; data points from test.pcd&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 点云投影到XOY平面</span></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_projected</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定一个输出参数</span></span><br><span class="line">    cloud_projected-&gt;width = cloud_in-&gt;width;</span><br><span class="line">    cloud_projected-&gt;height = <span class="number">1</span>; </span><br><span class="line">    cloud_projected-&gt;is_dense = <span class="literal">true</span>;</span><br><span class="line">    cloud_projected-&gt;points.<span class="built_in">resize</span>(cloud_in-&gt;points.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_in-&gt;points.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cloud_projected-&gt;points[i].x = cloud_in-&gt;points[i].x;</span><br><span class="line">        cloud_projected-&gt;points[i].y = cloud_in-&gt;points[i].y;</span><br><span class="line">        cloud_projected-&gt;points[i].z = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 将投影后的点云保存到文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法1：保存为ASCII格式</span></span><br><span class="line">    <span class="keyword">if</span> (!cloud_projected-&gt;<span class="built_in">empty</span>())&#123;</span><br><span class="line">        pcl::io::<span class="built_in">savePCDFileASCII</span>(<span class="string">&quot;projected.pcd&quot;</span>, *cloud_projected);</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot;-&gt;Saved &quot;</span> &lt;&lt; cloud_projected-&gt;points.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; data points to projected.pcd&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">PCL_ERROR</span>(<span class="string">&quot;Couldn&#x27;t save projected.pcd \n&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法2：保存为二进制格式</span></span><br><span class="line">    <span class="keyword">if</span> (!cloud_projected-&gt;<span class="built_in">empty</span>())&#123;</span><br><span class="line">        pcl::io::<span class="built_in">savePCDFileBinary</span>(<span class="string">&quot;projected.pcd&quot;</span>, *cloud_projected);</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot;-&gt;Saved &quot;</span> &lt;&lt; cloud_projected-&gt;points.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; data points to projected.pcd&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">PCL_ERROR</span>(<span class="string">&quot;Couldn&#x27;t save projected.pcd \n&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-点云连接"><a href="#3-点云连接" class="headerlink" title="3. 点云连接"></a>3. 点云连接</h1><p>编译运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./io -f</span><br><span class="line">./io -p</span><br></pre></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.5 FATAL_ERROR)</span><br><span class="line"></span><br><span class="line">project(io)</span><br><span class="line"></span><br><span class="line">find_package(PCL 1.11 REQUIRED)</span><br><span class="line"></span><br><span class="line">include_directories(<span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">link_directories(<span class="variable">$&#123;PCL_LIBRARY_DIRS&#125;</span>)</span><br><span class="line">add_definitions(<span class="variable">$&#123;PCL_DEFINITIONS&#125;</span>)</span><br><span class="line"></span><br><span class="line">add_executable (io m3.cpp)</span><br><span class="line">target_link_libraries (io <span class="variable">$&#123;PCL_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;argc: &quot;</span> &lt;&lt; argc &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;argv: &quot;</span> &lt;&lt; argv[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;please specify command line arg &#x27;-f&#x27; or &#x27;-p&#x27; &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt; cloud_a,cloud_b,cloud_c; </span><br><span class="line">    pcl::PointCloud&lt;pcl::Normal&gt; n_cloud_b;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointNormal&gt; p_n_cloud_c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建点云</span></span><br><span class="line">    cloud_a.width = <span class="number">5</span>;</span><br><span class="line">    cloud_a.height = cloud_b.height = n_cloud_b.height = <span class="number">1</span>;</span><br><span class="line">    cloud_a.points.<span class="built_in">resize</span>(cloud_a.width * cloud_a.height); <span class="comment">// 总数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否连接为a+b=c</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">&quot;-p&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        cloud_b.width = <span class="number">3</span>;</span><br><span class="line">        cloud_b.points.<span class="built_in">resize</span>(cloud_b.width * cloud_b.height);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        n_cloud_b.width = <span class="number">5</span>; <span class="comment">// 如果是连接XYZ与normal则生成5个法线</span></span><br><span class="line">        n_cloud_b.points.<span class="built_in">resize</span>(n_cloud_b.width * n_cloud_b.height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 填充点云</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_a.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        cloud_a.points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud_a.points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        cloud_a.points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">&quot;-p&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_b.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            cloud_b.points[i].x = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            cloud_b.points[i].y = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            cloud_b.points[i].z = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n_cloud_b.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            n_cloud_b.points[i].normal[<span class="number">0</span>] = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            n_cloud_b.points[i].normal[<span class="number">1</span>] = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">            n_cloud_b.points[i].normal[<span class="number">2</span>] = <span class="number">1024</span> * <span class="built_in">rand</span>() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 输出 A</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Cloud A: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_a.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud_a.points[i].x </span><br><span class="line">                  &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_a.points[i].y </span><br><span class="line">                  &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_a.points[i].z &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出 B</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Cloud B: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">&quot;-p&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_b.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud_b.points[i].x </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_b.points[i].y </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_b.points[i].z &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n_cloud_b.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; n_cloud_b.points[i].normal[<span class="number">0</span>] </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n_cloud_b.points[i].normal[<span class="number">1</span>] </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n_cloud_b.points[i].normal[<span class="number">2</span>] &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 连接</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">&quot;-p&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        cloud_c = cloud_a;</span><br><span class="line">        cloud_c += cloud_b; <span class="comment">// a+b = c</span></span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Cloud C: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cloud_c.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud_c.points[i].x </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_c.points[i].y </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud_c.points[i].z &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pcl::<span class="built_in">concatenateFields</span>(cloud_a, n_cloud_b, p_n_cloud_c); <span class="comment">// 连接字段</span></span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Cloud C: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; p_n_cloud_c.points.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; p_n_cloud_c.points[i].normal[<span class="number">0</span>] </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p_n_cloud_c.points[i].normal[<span class="number">1</span>] </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p_n_cloud_c.points[i].normal[<span class="number">2</span>] &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-读取文件&quot;&gt;&lt;a href=&quot;#1-读取文件&quot; class=&quot;headerlink&quot; title=&quot;1. 读取文件&quot;&gt;&lt;/a&gt;1. 读取文件&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/categories/C/PCL/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>【PCL】5. 深度图</title>
    <link href="http://hutalk.top/2024/11/21/PCL/%E3%80%90PCL%E3%80%915.%20%E6%B7%B1%E5%BA%A6%E5%9B%BE/"/>
    <id>http://hutalk.top/2024/11/21/PCL/%E3%80%90PCL%E3%80%915.%20%E6%B7%B1%E5%BA%A6%E5%9B%BE/</id>
    <published>2024-11-21T09:29:12.000Z</published>
    <updated>2024-11-22T06:48:14.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-从点云创建深度图"><a href="#1-从点云创建深度图" class="headerlink" title="1. 从点云创建深度图"></a>1. 从点云创建深度图</h2><pre><code class="cpp">#include &lt;pcl/range_image/range_image.h&gt;#include &lt;pcl/io/pcd_io.h&gt;#include &lt;pcl/visualization/pcl_visualizer.h&gt;#include &lt;pcl/visualization/range_image_visualizer.h&gt;int main(int argc, char** argv)&#123;    pcl::PointCloud&lt;pcl::PointXYZ&gt;::Ptr PointCloudPtr(new pcl::PointCloud&lt;pcl::PointXYZ&gt;);    pcl::PointCloud&lt;pcl::PointXYZ&gt; &amp;PointCloud = *PointCloudPtr;    pcl::io::loadPCDFile(&quot;../bunny.pcd&quot;, PointCloud); // 加载数据    float angular_resolution = (float)(1.0f * (M_PI / 180.0f) ); // 深度传感器的角度分辨率，即深度图像中一个像素对应的角度    float maxAngleWidth = (float)(360.0f * (M_PI / 180.0f)); // 水平最大采样角度宽度    float maxAngleHeight = (float)(180.0f * (M_PI / 180.0f)); // 垂直最大采样角度宽度    Eigen::Affine3f sensorPose = (Eigen::Affine3f) Eigen::Translation3f(0.0f, 0.0f, 0.0f); // 深度传感器的采集位置    // 深度传感器遵循的坐标系统    pcl::RangeImage::CoordinateFrame coordinate_frame = pcl::RangeImage::CAMERA_FRAME; // 深度传感器遵循的坐标系统    float noiseLevel = 0.00; // 获取深度图像时，近邻点对查询距离值的影响水平    float minRange = 0.0f; // 深度图像中，距离小于该值的点将被忽略    int borderSize = 1; // 深度图像边界大小    // boost::shared_ptr&lt;pcl::RangeImage&gt; range_image_ptr(new pcl::RangeImage); // 可视化    const std::shared_ptr&lt;pcl::RangeImage&gt; range_image_ptr(new pcl::RangeImage);    pcl::RangeImage &amp;rangeImage = *range_image_ptr;    rangeImage.createFromPointCloud(PointCloud, angular_resolution, maxAngleWidth, maxAngleHeight, sensorPose, coordinate_frame, noiseLevel, minRange, borderSize);    // -------------------------------------------------------------------------    // 输出    std::cout &lt;&lt; rangeImage &lt;&lt; std::endl;    pcl::visualization::PCLVisualizer viewer(&quot;3D Viewer&quot;);    viewer.setBackgroundColor(1, 1, 1);    // 添加深度点云    pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointWithRange&gt; range_image_color_handler(range_image_ptr, 0, 0, 0);    viewer.addPointCloud(range_image_ptr, range_image_color_handler, &quot;range image&quot;);    viewer.setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 4, &quot;range image&quot;);    // 添加原始点云    pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointXYZ&gt; org_image_color_handler(PointCloudPtr, 255, 100, 0);    viewer.addPointCloud(PointCloudPtr,org_image_color_handler, &quot;org image&quot;);    viewer.setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 2, &quot;org image&quot;);    viewer.initCameraParameters();    viewer.addCoordinateSystem(1.0);    while (!viewer.wasStopped()) &#123;         viewer.spin();          pcl_sleep(0.01);    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-从点云创建深度图&quot;&gt;&lt;a href=&quot;#1-从点云创建深度图&quot; class=&quot;headerlink&quot; title=&quot;1. 从点云创建深度图&quot;&gt;&lt;/a&gt;1. 从点云创建深度图&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;#include &amp;lt;pcl</summary>
      
    
    
    
    <category term="C++" scheme="http://hutalk.top/categories/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/categories/C/PCL/"/>
    
    
    <category term="C++" scheme="http://hutalk.top/tags/C/"/>
    
    <category term="PCL" scheme="http://hutalk.top/tags/PCL/"/>
    
  </entry>
  
</feed>
